// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Return
	BlockReference
	AccountList
	WitnessList
	AssetIssueList
	BlockList
	TransactionList
	NodeList
	Node
	Address
	EmptyMessage
	NumberMessage
	BytesMessage
	TimeMessage
	BlockLimit
	TransactionLimit
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protocol1 "github.com/tronprotocol/go-client-api/core"
import protocol2 "github.com/tronprotocol/go-client-api/core"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReturnResponseCode int32

const (
	Return_SUCCESS                      ReturnResponseCode = 0
	Return_SIGERROR                     ReturnResponseCode = 1
	Return_CONTRACT_VALIDATE_ERROR      ReturnResponseCode = 2
	Return_CONTRACT_EXE_ERROR           ReturnResponseCode = 3
	Return_BANDWITH_ERROR               ReturnResponseCode = 4
	Return_DUP_TRANSACTION_ERROR        ReturnResponseCode = 5
	Return_TAPOS_ERROR                  ReturnResponseCode = 6
	Return_TOO_BIG_TRANSACTION_ERROR    ReturnResponseCode = 7
	Return_TRANSACTION_EXPIRATION_ERROR ReturnResponseCode = 8
	Return_OTHER_ERROR                  ReturnResponseCode = 20
)

var ReturnResponseCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "SIGERROR",
	2:  "CONTRACT_VALIDATE_ERROR",
	3:  "CONTRACT_EXE_ERROR",
	4:  "BANDWITH_ERROR",
	5:  "DUP_TRANSACTION_ERROR",
	6:  "TAPOS_ERROR",
	7:  "TOO_BIG_TRANSACTION_ERROR",
	8:  "TRANSACTION_EXPIRATION_ERROR",
	20: "OTHER_ERROR",
}
var ReturnResponseCode_value = map[string]int32{
	"SUCCESS":                      0,
	"SIGERROR":                     1,
	"CONTRACT_VALIDATE_ERROR":      2,
	"CONTRACT_EXE_ERROR":           3,
	"BANDWITH_ERROR":               4,
	"DUP_TRANSACTION_ERROR":        5,
	"TAPOS_ERROR":                  6,
	"TOO_BIG_TRANSACTION_ERROR":    7,
	"TRANSACTION_EXPIRATION_ERROR": 8,
	"OTHER_ERROR":                  20,
}

func (x ReturnResponseCode) String() string {
	return proto.EnumName(ReturnResponseCode_name, int32(x))
}
func (ReturnResponseCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Return struct {
	Result  bool               `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Code    ReturnResponseCode `protobuf:"varint,2,opt,name=code,enum=protocol.ReturnResponseCode" json:"code,omitempty"`
	Message []byte             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Return) Reset()                    { *m = Return{} }
func (m *Return) String() string            { return proto.CompactTextString(m) }
func (*Return) ProtoMessage()               {}
func (*Return) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Return) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *Return) GetCode() ReturnResponseCode {
	if m != nil {
		return m.Code
	}
	return Return_SUCCESS
}

func (m *Return) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type BlockReference struct {
	BlockNum  int64  `protobuf:"varint,1,opt,name=block_num,json=blockNum" json:"block_num,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *BlockReference) Reset()                    { *m = BlockReference{} }
func (m *BlockReference) String() string            { return proto.CompactTextString(m) }
func (*BlockReference) ProtoMessage()               {}
func (*BlockReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockReference) GetBlockNum() int64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *BlockReference) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type AccountList struct {
	Accounts []*protocol1.Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *AccountList) Reset()                    { *m = AccountList{} }
func (m *AccountList) String() string            { return proto.CompactTextString(m) }
func (*AccountList) ProtoMessage()               {}
func (*AccountList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountList) GetAccounts() []*protocol1.Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type WitnessList struct {
	Witnesses []*protocol1.Witness `protobuf:"bytes,1,rep,name=witnesses" json:"witnesses,omitempty"`
}

func (m *WitnessList) Reset()                    { *m = WitnessList{} }
func (m *WitnessList) String() string            { return proto.CompactTextString(m) }
func (*WitnessList) ProtoMessage()               {}
func (*WitnessList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WitnessList) GetWitnesses() []*protocol1.Witness {
	if m != nil {
		return m.Witnesses
	}
	return nil
}

type AssetIssueList struct {
	AssetIssue []*protocol2.AssetIssueContract `protobuf:"bytes,1,rep,name=assetIssue" json:"assetIssue,omitempty"`
}

func (m *AssetIssueList) Reset()                    { *m = AssetIssueList{} }
func (m *AssetIssueList) String() string            { return proto.CompactTextString(m) }
func (*AssetIssueList) ProtoMessage()               {}
func (*AssetIssueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AssetIssueList) GetAssetIssue() []*protocol2.AssetIssueContract {
	if m != nil {
		return m.AssetIssue
	}
	return nil
}

type BlockList struct {
	Block []*protocol1.Block `protobuf:"bytes,1,rep,name=block" json:"block,omitempty"`
}

func (m *BlockList) Reset()                    { *m = BlockList{} }
func (m *BlockList) String() string            { return proto.CompactTextString(m) }
func (*BlockList) ProtoMessage()               {}
func (*BlockList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockList) GetBlock() []*protocol1.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type TransactionList struct {
	Transaction []*protocol1.Transaction `protobuf:"bytes,1,rep,name=transaction" json:"transaction,omitempty"`
}

func (m *TransactionList) Reset()                    { *m = TransactionList{} }
func (m *TransactionList) String() string            { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()               {}
func (*TransactionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TransactionList) GetTransaction() []*protocol1.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// Gossip node list
type NodeList struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodeList) Reset()                    { *m = NodeList{} }
func (m *NodeList) String() string            { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()               {}
func (*NodeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NodeList) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Gossip node
type Node struct {
	Address *Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Node) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Gossip node address
type Address struct {
	Host []byte `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Address) GetHost() []byte {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type NumberMessage struct {
	Num int64 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *NumberMessage) Reset()                    { *m = NumberMessage{} }
func (m *NumberMessage) String() string            { return proto.CompactTextString(m) }
func (*NumberMessage) ProtoMessage()               {}
func (*NumberMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NumberMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BytesMessage struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *BytesMessage) Reset()                    { *m = BytesMessage{} }
func (m *BytesMessage) String() string            { return proto.CompactTextString(m) }
func (*BytesMessage) ProtoMessage()               {}
func (*BytesMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BytesMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type TimeMessage struct {
	BeginInMilliseconds int64 `protobuf:"varint,1,opt,name=beginInMilliseconds" json:"beginInMilliseconds,omitempty"`
	EndInMilliseconds   int64 `protobuf:"varint,2,opt,name=endInMilliseconds" json:"endInMilliseconds,omitempty"`
}

func (m *TimeMessage) Reset()                    { *m = TimeMessage{} }
func (m *TimeMessage) String() string            { return proto.CompactTextString(m) }
func (*TimeMessage) ProtoMessage()               {}
func (*TimeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TimeMessage) GetBeginInMilliseconds() int64 {
	if m != nil {
		return m.BeginInMilliseconds
	}
	return 0
}

func (m *TimeMessage) GetEndInMilliseconds() int64 {
	if m != nil {
		return m.EndInMilliseconds
	}
	return 0
}

type BlockLimit struct {
	StartNum int64 `protobuf:"varint,1,opt,name=startNum" json:"startNum,omitempty"`
	EndNum   int64 `protobuf:"varint,2,opt,name=endNum" json:"endNum,omitempty"`
}

func (m *BlockLimit) Reset()                    { *m = BlockLimit{} }
func (m *BlockLimit) String() string            { return proto.CompactTextString(m) }
func (*BlockLimit) ProtoMessage()               {}
func (*BlockLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BlockLimit) GetStartNum() int64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *BlockLimit) GetEndNum() int64 {
	if m != nil {
		return m.EndNum
	}
	return 0
}

type TransactionLimit struct {
	TransactionId []byte `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	LimitNum      int64  `protobuf:"varint,2,opt,name=limitNum" json:"limitNum,omitempty"`
}

func (m *TransactionLimit) Reset()                    { *m = TransactionLimit{} }
func (m *TransactionLimit) String() string            { return proto.CompactTextString(m) }
func (*TransactionLimit) ProtoMessage()               {}
func (*TransactionLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TransactionLimit) GetTransactionId() []byte {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *TransactionLimit) GetLimitNum() int64 {
	if m != nil {
		return m.LimitNum
	}
	return 0
}

func init() {
	proto.RegisterType((*Return)(nil), "protocol.Return")
	proto.RegisterType((*BlockReference)(nil), "protocol.BlockReference")
	proto.RegisterType((*AccountList)(nil), "protocol.AccountList")
	proto.RegisterType((*WitnessList)(nil), "protocol.WitnessList")
	proto.RegisterType((*AssetIssueList)(nil), "protocol.AssetIssueList")
	proto.RegisterType((*BlockList)(nil), "protocol.BlockList")
	proto.RegisterType((*TransactionList)(nil), "protocol.TransactionList")
	proto.RegisterType((*NodeList)(nil), "protocol.NodeList")
	proto.RegisterType((*Node)(nil), "protocol.Node")
	proto.RegisterType((*Address)(nil), "protocol.Address")
	proto.RegisterType((*EmptyMessage)(nil), "protocol.EmptyMessage")
	proto.RegisterType((*NumberMessage)(nil), "protocol.NumberMessage")
	proto.RegisterType((*BytesMessage)(nil), "protocol.BytesMessage")
	proto.RegisterType((*TimeMessage)(nil), "protocol.TimeMessage")
	proto.RegisterType((*BlockLimit)(nil), "protocol.BlockLimit")
	proto.RegisterType((*TransactionLimit)(nil), "protocol.TransactionLimit")
	proto.RegisterEnum("protocol.ReturnResponseCode", ReturnResponseCode_name, ReturnResponseCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wallet service

type WalletClient interface {
	GetAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*protocol1.Account, error)
	CreateTransaction(ctx context.Context, in *protocol2.TransferContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	BroadcastTransaction(ctx context.Context, in *protocol1.Transaction, opts ...grpc.CallOption) (*Return, error)
	ListAccounts(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AccountList, error)
	UpdateAccount(ctx context.Context, in *protocol2.AccountUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	VoteWitnessAccount(ctx context.Context, in *protocol2.VoteWitnessContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	CreateAssetIssue(ctx context.Context, in *protocol2.AssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	UpdateWitness(ctx context.Context, in *protocol2.WitnessUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	CreateWitness(ctx context.Context, in *protocol2.WitnessCreateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	TransferAsset(ctx context.Context, in *protocol2.TransferAssetContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	ParticipateAssetIssue(ctx context.Context, in *protocol2.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	FreezeBalance(ctx context.Context, in *protocol2.FreezeBalanceContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	UnfreezeBalance(ctx context.Context, in *protocol2.UnfreezeBalanceContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	WithdrawBalance(ctx context.Context, in *protocol2.WithdrawBalanceContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol2.AssetIssueContract, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error)
	GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol1.Transaction, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*protocol1.Account, error) {
	out := new(protocol1.Account)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction(ctx context.Context, in *protocol2.TransferContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BroadcastTransaction(ctx context.Context, in *protocol1.Transaction, opts ...grpc.CallOption) (*Return, error) {
	out := new(Return)
	err := grpc.Invoke(ctx, "/protocol.Wallet/BroadcastTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListAccounts(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ListAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount(ctx context.Context, in *protocol2.AccountUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount(ctx context.Context, in *protocol2.VoteWitnessContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue(ctx context.Context, in *protocol2.AssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ListWitnesses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness(ctx context.Context, in *protocol2.WitnessUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/UpdateWitness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness(ctx context.Context, in *protocol2.WitnessCreateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateWitness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset(ctx context.Context, in *protocol2.TransferAssetContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/TransferAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue(ctx context.Context, in *protocol2.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance(ctx context.Context, in *protocol2.FreezeBalanceContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/FreezeBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance(ctx context.Context, in *protocol2.UnfreezeBalanceContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/UnfreezeBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance(ctx context.Context, in *protocol2.WithdrawBalanceContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/WithdrawBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol2.AssetIssueContract, error) {
	out := new(protocol2.AssetIssueContract)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetNowBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := grpc.Invoke(ctx, "/protocol.Wallet/TotalTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetBlockById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetBlockByLimitNext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetBlockByLatestNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetTransactionById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wallet service

type WalletServer interface {
	GetAccount(context.Context, *protocol1.Account) (*protocol1.Account, error)
	CreateTransaction(context.Context, *protocol2.TransferContract) (*protocol1.Transaction, error)
	BroadcastTransaction(context.Context, *protocol1.Transaction) (*Return, error)
	ListAccounts(context.Context, *EmptyMessage) (*AccountList, error)
	UpdateAccount(context.Context, *protocol2.AccountUpdateContract) (*protocol1.Transaction, error)
	VoteWitnessAccount(context.Context, *protocol2.VoteWitnessContract) (*protocol1.Transaction, error)
	CreateAssetIssue(context.Context, *protocol2.AssetIssueContract) (*protocol1.Transaction, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	UpdateWitness(context.Context, *protocol2.WitnessUpdateContract) (*protocol1.Transaction, error)
	CreateWitness(context.Context, *protocol2.WitnessCreateContract) (*protocol1.Transaction, error)
	TransferAsset(context.Context, *protocol2.TransferAssetContract) (*protocol1.Transaction, error)
	ParticipateAssetIssue(context.Context, *protocol2.ParticipateAssetIssueContract) (*protocol1.Transaction, error)
	FreezeBalance(context.Context, *protocol2.FreezeBalanceContract) (*protocol1.Transaction, error)
	UnfreezeBalance(context.Context, *protocol2.UnfreezeBalanceContract) (*protocol1.Transaction, error)
	WithdrawBalance(context.Context, *protocol2.WithdrawBalanceContract) (*protocol1.Transaction, error)
	ListNodes(context.Context, *EmptyMessage) (*NodeList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetAssetIssueByAccount(context.Context, *protocol1.Account) (*AssetIssueList, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*protocol2.AssetIssueContract, error)
	GetNowBlock(context.Context, *EmptyMessage) (*protocol1.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*protocol1.Block, error)
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetBlockById(context.Context, *BytesMessage) (*protocol1.Block, error)
	GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error)
	GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error)
	GetTransactionById(context.Context, *BytesMessage) (*protocol1.Transaction, error)
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction(ctx, req.(*protocol2.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BroadcastTransaction(ctx, req.(*protocol1.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListAccounts(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount(ctx, req.(*protocol2.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount(ctx, req.(*protocol2.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue(ctx, req.(*protocol2.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness(ctx, req.(*protocol2.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness(ctx, req.(*protocol2.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset(ctx, req.(*protocol2.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, req.(*protocol2.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/FreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance(ctx, req.(*protocol2.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance(ctx, req.(*protocol2.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/WithdrawBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance(ctx, req.(*protocol2.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TotalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLimitNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLatestNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Wallet_CreateTransaction_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _Wallet_BroadcastTransaction_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Wallet_ListAccounts_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Wallet_UpdateAccount_Handler,
		},
		{
			MethodName: "VoteWitnessAccount",
			Handler:    _Wallet_VoteWitnessAccount_Handler,
		},
		{
			MethodName: "CreateAssetIssue",
			Handler:    _Wallet_CreateAssetIssue_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _Wallet_ListWitnesses_Handler,
		},
		{
			MethodName: "UpdateWitness",
			Handler:    _Wallet_UpdateWitness_Handler,
		},
		{
			MethodName: "CreateWitness",
			Handler:    _Wallet_CreateWitness_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Wallet_TransferAsset_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue",
			Handler:    _Wallet_ParticipateAssetIssue_Handler,
		},
		{
			MethodName: "FreezeBalance",
			Handler:    _Wallet_FreezeBalance_Handler,
		},
		{
			MethodName: "UnfreezeBalance",
			Handler:    _Wallet_UnfreezeBalance_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Wallet_WithdrawBalance_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Wallet_ListNodes_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _Wallet_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _Wallet_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _Wallet_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Wallet_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Wallet_GetBlockByNum_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _Wallet_TotalTransaction_Handler,
		},
		{
			MethodName: "GetBlockById",
			Handler:    _Wallet_GetBlockById_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext",
			Handler:    _Wallet_GetBlockByLimitNext_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum",
			Handler:    _Wallet_GetBlockByLatestNum_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Wallet_GetTransactionById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// Client API for WalletSolidity service

type WalletSolidityClient interface {
	GetAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*protocol1.Account, error)
	ListAccounts(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AccountList, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueListByTimestamp(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol2.AssetIssueContract, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	// get transaction
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	GetTransactionsByTimestamp(ctx context.Context, in *TimeMessage, opts ...grpc.CallOption) (*TransactionList, error)
	GetTransactionsFromThis(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*TransactionList, error)
	GetTransactionsToThis(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*TransactionList, error)
}

type walletSolidityClient struct {
	cc *grpc.ClientConn
}

func NewWalletSolidityClient(cc *grpc.ClientConn) WalletSolidityClient {
	return &walletSolidityClient{cc}
}

func (c *walletSolidityClient) GetAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*protocol1.Account, error) {
	out := new(protocol1.Account)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListAccounts(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/ListAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/ListWitnesses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueListByTimestamp(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueListByTimestamp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueByAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueByAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol2.AssetIssueContract, error) {
	out := new(protocol2.AssetIssueContract)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetNowBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetBlockByNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/TotalTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionsByTimestamp(ctx context.Context, in *TimeMessage, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionsByTimestamp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionsFromThis(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionsFromThis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionsToThis(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionsToThis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletSolidity service

type WalletSolidityServer interface {
	GetAccount(context.Context, *protocol1.Account) (*protocol1.Account, error)
	ListAccounts(context.Context, *EmptyMessage) (*AccountList, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetAssetIssueListByTimestamp(context.Context, *NumberMessage) (*AssetIssueList, error)
	GetAssetIssueByAccount(context.Context, *protocol1.Account) (*AssetIssueList, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*protocol2.AssetIssueContract, error)
	GetNowBlock(context.Context, *EmptyMessage) (*protocol1.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*protocol1.Block, error)
	// get transaction
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetTransactionById(context.Context, *BytesMessage) (*protocol1.Transaction, error)
	GetTransactionsByTimestamp(context.Context, *TimeMessage) (*TransactionList, error)
	GetTransactionsFromThis(context.Context, *protocol1.Account) (*TransactionList, error)
	GetTransactionsToThis(context.Context, *protocol1.Account) (*TransactionList, error)
}

func RegisterWalletSolidityServer(s *grpc.Server, srv WalletSolidityServer) {
	s.RegisterService(&_WalletSolidity_serviceDesc, srv)
}

func _WalletSolidity_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccount(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListAccounts(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueListByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueListByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueListByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueListByTimestamp(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueByAccount(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/TotalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionsByTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionsByTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionsByTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionsByTimestamp(ctx, req.(*TimeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionsFromThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionsFromThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionsFromThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionsFromThis(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionsToThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionsToThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionsToThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionsToThis(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletSolidity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletSolidity",
	HandlerType: (*WalletSolidityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _WalletSolidity_GetAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _WalletSolidity_ListAccounts_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _WalletSolidity_ListWitnesses_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _WalletSolidity_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetAssetIssueListByTimestamp",
			Handler:    _WalletSolidity_GetAssetIssueListByTimestamp_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _WalletSolidity_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _WalletSolidity_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _WalletSolidity_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _WalletSolidity_GetBlockByNum_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _WalletSolidity_TotalTransaction_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _WalletSolidity_GetTransactionById_Handler,
		},
		{
			MethodName: "GetTransactionsByTimestamp",
			Handler:    _WalletSolidity_GetTransactionsByTimestamp_Handler,
		},
		{
			MethodName: "GetTransactionsFromThis",
			Handler:    _WalletSolidity_GetTransactionsFromThis_Handler,
		},
		{
			MethodName: "GetTransactionsToThis",
			Handler:    _WalletSolidity_GetTransactionsToThis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// Client API for Database service

type DatabaseClient interface {
	// for tapos
	GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error)
	GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.DynamicProperties, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
}

type databaseClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseClient(cc *grpc.ClientConn) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error) {
	out := new(BlockReference)
	err := grpc.Invoke(ctx, "/protocol.Database/getBlockReference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.DynamicProperties, error) {
	out := new(protocol1.DynamicProperties)
	err := grpc.Invoke(ctx, "/protocol.Database/GetDynamicProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Database/GetNowBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Database/GetBlockByNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Database service

type DatabaseServer interface {
	// for tapos
	GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error)
	GetDynamicProperties(context.Context, *EmptyMessage) (*protocol1.DynamicProperties, error)
	GetNowBlock(context.Context, *EmptyMessage) (*protocol1.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*protocol1.Block, error)
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_GetBlockReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockReference(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDynamicProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetDynamicProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlockReference",
			Handler:    _Database_GetBlockReference_Handler,
		},
		{
			MethodName: "GetDynamicProperties",
			Handler:    _Database_GetDynamicProperties_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Database_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Database_GetBlockByNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// Client API for Network service

type NetworkClient interface {
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

// Server API for Network service

type NetworkServer interface {
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x99, 0x5f, 0x53, 0x1b, 0xc9,
	0x11, 0xc0, 0x2d, 0x30, 0x20, 0x1a, 0x89, 0x3f, 0xc3, 0x7f, 0x01, 0x36, 0x1e, 0xff, 0xe3, 0x6c,
	0x83, 0x6c, 0xb9, 0x52, 0x97, 0xfb, 0x53, 0x49, 0x24, 0xe0, 0x64, 0xa5, 0x6c, 0x41, 0x2d, 0xf2,
	0xe1, 0xf8, 0x21, 0xd4, 0x6a, 0x35, 0x48, 0x7b, 0x5e, 0xed, 0x28, 0x3b, 0xa3, 0xc3, 0xca, 0x3d,
	0x25, 0x95, 0x54, 0xa5, 0xf2, 0x9a, 0xa7, 0x7c, 0xae, 0x7c, 0x80, 0x54, 0xa5, 0xf2, 0x05, 0xf2,
	0x09, 0x72, 0x35, 0xb3, 0xb3, 0xda, 0xd9, 0xd5, 0x4a, 0x18, 0xcc, 0x93, 0xd9, 0xee, 0x9e, 0xfe,
	0xcd, 0x4c, 0xf7, 0x74, 0x37, 0x18, 0xb2, 0x66, 0xc7, 0xce, 0x9b, 0x1d, 0x7b, 0xaf, 0xe3, 0x51,
	0x4e, 0x51, 0x5a, 0xfe, 0x63, 0x51, 0x27, 0x37, 0x67, 0x51, 0x8f, 0xe4, 0x6b, 0x1e, 0x75, 0x7d,
	0x55, 0x6e, 0x51, 0x0a, 0xf6, 0xa9, 0xcb, 0x3d, 0xd3, 0xe2, 0x4a, 0xb8, 0xd9, 0xa4, 0xb4, 0xe9,
	0x90, 0xbc, 0xf4, 0xe2, 0xba, 0x94, 0x9b, 0xdc, 0xa6, 0x2e, 0xf3, 0xb5, 0xf8, 0x3f, 0x63, 0x30,
	0x69, 0x10, 0xde, 0xf5, 0x5c, 0xb4, 0x02, 0x93, 0x1e, 0x61, 0x5d, 0x87, 0xaf, 0xa5, 0xb6, 0x53,
	0x3b, 0x69, 0x43, 0x7d, 0xa1, 0x02, 0xdc, 0xb6, 0x68, 0x83, 0xac, 0x8d, 0x6d, 0xa7, 0x76, 0x66,
	0x0b, 0x77, 0xf6, 0x02, 0xfe, 0x9e, 0xbf, 0x6e, 0xcf, 0x23, 0xac, 0x43, 0x5d, 0x46, 0xce, 0x84,
	0x95, 0x21, 0x6d, 0xd1, 0x1a, 0x4c, 0xb5, 0x09, 0x63, 0x66, 0x93, 0xac, 0x8d, 0x6f, 0xa7, 0x76,
	0x32, 0x46, 0xf0, 0x89, 0xff, 0x97, 0x82, 0x6c, 0x64, 0x05, 0x9a, 0x81, 0xa9, 0x93, 0xb7, 0xfb,
	0xfb, 0x87, 0x27, 0x27, 0xf3, 0xb7, 0x50, 0x06, 0xd2, 0x27, 0x95, 0xf2, 0xa1, 0x61, 0x1c, 0x19,
	0xf3, 0x29, 0xb4, 0x01, 0xab, 0xfb, 0x47, 0xd5, 0x9a, 0x51, 0xdc, 0xaf, 0x9d, 0x7d, 0x5f, 0x7c,
	0x5d, 0x39, 0x28, 0xd6, 0x0e, 0xcf, 0x7c, 0xe5, 0x18, 0x5a, 0x01, 0xd4, 0x57, 0x1e, 0xbe, 0x0b,
	0xe4, 0xe3, 0x08, 0xc1, 0x6c, 0xa9, 0x58, 0x3d, 0x38, 0xad, 0xd4, 0x5e, 0x29, 0xd9, 0x6d, 0xb4,
	0x0e, 0xcb, 0x07, 0x6f, 0x8f, 0xcf, 0x6a, 0x46, 0xb1, 0x7a, 0x52, 0xdc, 0xaf, 0x55, 0x8e, 0xaa,
	0x4a, 0x35, 0x81, 0xe6, 0x60, 0xa6, 0x56, 0x3c, 0x3e, 0x3a, 0x51, 0x82, 0x49, 0xb4, 0x05, 0xeb,
	0xb5, 0xa3, 0xa3, 0xb3, 0x52, 0xa5, 0x9c, 0x60, 0x3f, 0x85, 0xb6, 0x61, 0x33, 0x22, 0x7e, 0x77,
	0x5c, 0x31, 0x8a, 0x9a, 0x45, 0x5a, 0x78, 0x3c, 0xaa, 0xbd, 0x3a, 0x34, 0x94, 0x60, 0x09, 0xbf,
	0x86, 0xd9, 0x92, 0x43, 0xad, 0x0f, 0x06, 0x39, 0x27, 0x1e, 0x71, 0x2d, 0x82, 0x36, 0x60, 0xba,
	0x2e, 0x24, 0x67, 0x6e, 0xb7, 0x2d, 0xaf, 0x7b, 0xdc, 0x48, 0x4b, 0x41, 0xb5, 0xdb, 0x46, 0x5b,
	0x00, 0xbe, 0xb2, 0x65, 0xb2, 0x96, 0xbc, 0xf6, 0x8c, 0xe1, 0x9b, 0xbf, 0x32, 0x59, 0x0b, 0x7f,
	0x0b, 0x33, 0x45, 0xcb, 0xa2, 0x5d, 0x97, 0xbf, 0xb6, 0x19, 0x47, 0xbb, 0x90, 0x36, 0xfd, 0x4f,
	0xb6, 0x96, 0xda, 0x1e, 0xdf, 0x99, 0x29, 0x2c, 0x84, 0x21, 0x52, 0x86, 0x46, 0xdf, 0x04, 0xff,
	0x0a, 0x66, 0x4e, 0x6d, 0xee, 0x12, 0xc6, 0xe4, 0xea, 0x3c, 0x4c, 0x5f, 0xf8, 0x9f, 0x24, 0x61,
	0xb9, 0xb2, 0x34, 0x42, 0x1b, 0x5c, 0x85, 0xd9, 0x22, 0x63, 0x84, 0x57, 0x18, 0xeb, 0x12, 0xe9,
	0xe2, 0x5b, 0x00, 0xb3, 0x2f, 0x51, 0x3e, 0x36, 0xb5, 0x2d, 0xf4, 0x75, 0x41, 0x62, 0x1a, 0x9a,
	0x3d, 0x2e, 0xc0, 0xb4, 0xbc, 0x1b, 0xe9, 0xea, 0x21, 0x4c, 0xc8, 0x73, 0x2a, 0x2f, 0x73, 0xa1,
	0x17, 0xff, 0xfe, 0x7c, 0x2d, 0xfe, 0x2d, 0xcc, 0xd5, 0x3c, 0xd3, 0x65, 0xa6, 0x25, 0x52, 0x59,
	0xae, 0xfc, 0x12, 0x66, 0x78, 0x28, 0x52, 0xeb, 0x97, 0xc3, 0xf5, 0x9a, 0xbd, 0xa1, 0x5b, 0xe2,
	0xe7, 0x90, 0xae, 0xd2, 0x86, 0x7f, 0x92, 0x07, 0x30, 0xe1, 0xd2, 0x46, 0xff, 0x22, 0x66, 0xc3,
	0xe5, 0xc2, 0xc4, 0xf0, 0x95, 0xf8, 0x25, 0xdc, 0x16, 0x9f, 0xe8, 0x29, 0x4c, 0x99, 0x8d, 0x86,
	0x47, 0x18, 0x93, 0x11, 0x8c, 0xde, 0xbb, 0xaf, 0x30, 0x02, 0x0b, 0xfc, 0x02, 0xa6, 0x94, 0x0c,
	0x21, 0xb8, 0xdd, 0xa2, 0xcc, 0x7f, 0x65, 0x19, 0x43, 0xfe, 0x2c, 0x64, 0x1d, 0xea, 0x71, 0x19,
	0xec, 0x09, 0x43, 0xfe, 0x8c, 0x67, 0x21, 0x73, 0xd8, 0xee, 0xf0, 0xde, 0x1b, 0xf5, 0x72, 0xee,
	0x41, 0xb6, 0xda, 0x6d, 0xd7, 0x89, 0xa7, 0x04, 0x68, 0x1e, 0xc6, 0xc3, 0xf4, 0x11, 0x3f, 0xe2,
	0x07, 0x90, 0x29, 0xf5, 0x38, 0x61, 0x81, 0xc5, 0x12, 0x4c, 0xfc, 0x68, 0x3a, 0x32, 0x2a, 0x82,
	0xe5, 0x7f, 0xe0, 0x36, 0xcc, 0xd4, 0xec, 0x36, 0x09, 0x8c, 0x9e, 0xc3, 0x62, 0x9d, 0x34, 0x6d,
	0xb7, 0xe2, 0xbe, 0xb1, 0x1d, 0xc7, 0x66, 0xc4, 0xa2, 0x6e, 0x83, 0x29, 0xb7, 0x49, 0x2a, 0xf4,
	0x0c, 0x16, 0x88, 0xdb, 0x88, 0xd9, 0x8f, 0x49, 0xfb, 0x41, 0x05, 0xfe, 0x0d, 0x80, 0x8a, 0x70,
	0xdb, 0xe6, 0x28, 0x07, 0x69, 0xc6, 0x4d, 0x8f, 0x57, 0xc3, 0xc4, 0x0f, 0xbe, 0x45, 0x05, 0x22,
	0x6e, 0x43, 0x68, 0x7c, 0x67, 0xea, 0x0b, 0xd7, 0x60, 0x3e, 0x12, 0x6f, 0xe1, 0xe7, 0x01, 0x64,
	0xb5, 0x30, 0x56, 0x1a, 0xea, 0x88, 0x51, 0xa1, 0xa0, 0x39, 0xc2, 0x3c, 0xf4, 0xd9, 0xff, 0x2e,
	0xfc, 0x7f, 0x05, 0x26, 0x4f, 0x4d, 0xc7, 0x21, 0x1c, 0x35, 0x01, 0xca, 0x84, 0xab, 0xc7, 0x82,
	0x06, 0xdf, 0x4f, 0x6e, 0x50, 0x84, 0x5f, 0xfe, 0xf9, 0x5f, 0xff, 0xfd, 0xc7, 0xd8, 0x2e, 0x46,
	0xf9, 0x0b, 0xe9, 0x24, 0xdf, 0x24, 0x5c, 0xbd, 0xb2, 0xaf, 0x53, 0x4f, 0xde, 0x2f, 0xa1, 0x04,
	0x05, 0x72, 0x60, 0x61, 0xdf, 0x23, 0x26, 0x27, 0xda, 0x79, 0x50, 0x2e, 0x96, 0xa6, 0xe7, 0xc4,
	0x0b, 0x9e, 0x4a, 0x2e, 0x39, 0x85, 0xf1, 0x03, 0x09, 0xbf, 0x83, 0xd7, 0x03, 0x86, 0x25, 0xbd,
	0x6a, 0x87, 0xff, 0x3a, 0xf5, 0x04, 0xb5, 0x60, 0xa9, 0xe4, 0x51, 0xb3, 0x61, 0x99, 0x8c, 0xeb,
	0xc0, 0x64, 0xa7, 0xb9, 0xf9, 0x78, 0x69, 0xc7, 0x8f, 0x25, 0xe6, 0x1e, 0xde, 0x0c, 0x30, 0xf5,
	0xc0, 0x5d, 0x8c, 0xc4, 0x21, 0x23, 0x5e, 0x90, 0xba, 0x1b, 0x86, 0x56, 0x42, 0x57, 0x7a, 0x0e,
	0xeb, 0xc7, 0xd1, 0x6a, 0x18, 0xfe, 0x85, 0xe4, 0xe4, 0xf1, 0x62, 0xc0, 0x71, 0x6c, 0xa6, 0x5f,
	0xe6, 0x32, 0x4a, 0xd2, 0x20, 0x1b, 0xb2, 0x6f, 0x3b, 0x0d, 0x93, 0x93, 0x20, 0x72, 0x77, 0x07,
	0xdc, 0xfb, 0xfa, 0xcb, 0xae, 0x73, 0x5b, 0xf2, 0x73, 0x78, 0x39, 0xa0, 0x74, 0xe5, 0xb2, 0x70,
	0x07, 0xe8, 0x0f, 0x80, 0xbe, 0xa7, 0x9c, 0xa8, 0x82, 0x18, 0xf0, 0xb6, 0x42, 0x77, 0x9a, 0xf6,
	0x32, 0xda, 0x43, 0x49, 0xbb, 0x8b, 0x73, 0x01, 0xed, 0x47, 0xca, 0x89, 0xaa, 0xb0, 0x1a, 0xd2,
	0x81, 0x79, 0x3f, 0x57, 0xc2, 0x0a, 0x8a, 0x46, 0xd6, 0xd5, 0x61, 0xbc, 0xfb, 0x92, 0xb7, 0x85,
	0xd7, 0xa2, 0xc9, 0x22, 0x8b, 0xb0, 0x2d, 0x1c, 0x08, 0x5a, 0x0f, 0xb2, 0x22, 0x14, 0xa7, 0x41,
	0xa1, 0xff, 0x94, 0x10, 0x6a, 0x8d, 0x04, 0x7f, 0x25, 0x21, 0x2f, 0xc3, 0x2b, 0x14, 0x81, 0xea,
	0xb7, 0x0d, 0x11, 0xc4, 0x55, 0x94, 0xac, 0x0b, 0xc3, 0xa8, 0xfc, 0xe9, 0x61, 0x54, 0xa2, 0xcf,
	0x0a, 0xa3, 0x22, 0x89, 0x53, 0xda, 0x90, 0xf5, 0xef, 0x74, 0x38, 0xca, 0xd7, 0x5f, 0x19, 0xe5,
	0xdf, 0x69, 0x14, 0x15, 0xbc, 0x66, 0x19, 0x2a, 0x1d, 0x15, 0x51, 0x5c, 0x19, 0xc5, 0xd5, 0x6a,
	0x19, 0x40, 0x81, 0xfa, 0x53, 0x0a, 0x96, 0x8f, 0x4d, 0x8f, 0xdb, 0x96, 0xdd, 0x89, 0xe6, 0xcb,
	0xe3, 0xd0, 0x65, 0xa2, 0xc1, 0x65, 0xec, 0x1d, 0xc9, 0xc6, 0x78, 0x2b, 0x60, 0x77, 0x42, 0x2f,
	0xd1, 0xfc, 0xb1, 0x21, 0xfb, 0x9d, 0x47, 0xc8, 0x1f, 0x49, 0xc9, 0x74, 0x4c, 0x31, 0xe2, 0x68,
	0xc7, 0x8d, 0x28, 0xae, 0x7c, 0xdc, 0x73, 0xb9, 0xba, 0xee, 0xaf, 0x16, 0x28, 0x0a, 0x73, 0x6f,
	0xdd, 0xf3, 0x08, 0xec, 0x5e, 0xe8, 0x2b, 0xa6, 0xba, 0x0c, 0x87, 0x25, 0x6e, 0x13, 0xaf, 0xf6,
	0x73, 0xc6, 0x4d, 0x02, 0x9e, 0xda, 0xbc, 0xd5, 0xf0, 0xcc, 0x8b, 0x04, 0x60, 0x4c, 0x75, 0x65,
	0xe0, 0x85, 0x5a, 0xaf, 0x01, 0x7f, 0x80, 0x69, 0xf1, 0xa8, 0xc4, 0x98, 0x31, 0xfc, 0x21, 0xa2,
	0xe8, 0x78, 0x22, 0x5f, 0xe1, 0x0b, 0xe9, 0xfc, 0x29, 0x5e, 0xd0, 0x5f, 0x9a, 0x1c, 0x5b, 0xc4,
	0x0b, 0x5c, 0x44, 0x83, 0x72, 0xf4, 0xb7, 0x14, 0x2c, 0x88, 0xe6, 0x17, 0x1d, 0xea, 0x86, 0x41,
	0xd7, 0x92, 0x0a, 0x90, 0x44, 0x17, 0x25, 0xfa, 0x9b, 0xb0, 0x25, 0x89, 0xb6, 0xd7, 0x4f, 0x11,
	0xc1, 0x13, 0x5b, 0xd8, 0x40, 0xc3, 0xf5, 0xa8, 0x03, 0x2b, 0x91, 0x9d, 0x94, 0x7a, 0x23, 0x5a,
	0xf2, 0xf0, 0x9d, 0x7c, 0x21, 0x77, 0x72, 0x1f, 0xdf, 0x49, 0x24, 0xd5, 0x7b, 0x5a, 0x8d, 0x65,
	0xb0, 0x18, 0x23, 0x56, 0xcd, 0x36, 0xd1, 0x4f, 0xaf, 0xcf, 0x53, 0xb9, 0x91, 0xe5, 0x17, 0x3f,
	0x92, 0xdc, 0x6d, 0xbc, 0x31, 0x84, 0xeb, 0x9a, 0x6d, 0x19, 0xdd, 0x36, 0xcc, 0x94, 0x09, 0xaf,
	0xd2, 0x0b, 0x39, 0x16, 0x0d, 0xbd, 0xea, 0xf8, 0xf4, 0x3b, 0xd8, 0x25, 0x9b, 0x84, 0xbb, 0xf4,
	0x42, 0xce, 0xc4, 0xb1, 0x2e, 0xa9, 0x69, 0x10, 0x87, 0x6c, 0x99, 0x70, 0xe9, 0xa2, 0xd4, 0x13,
	0x63, 0xd6, 0xaa, 0x96, 0x38, 0xfa, 0x40, 0x39, 0x48, 0x1c, 0x28, 0xea, 0x4d, 0xc2, 0xa5, 0xd3,
	0x7a, 0xcf, 0xed, 0xb6, 0x63, 0x45, 0x3d, 0xa2, 0x43, 0x7f, 0x49, 0xc1, 0x7c, 0x8d, 0x72, 0xd3,
	0xd1, 0x07, 0x8f, 0x61, 0x47, 0x1d, 0xb6, 0x23, 0xfc, 0x6b, 0xb9, 0x81, 0xaf, 0xc2, 0xd6, 0xc5,
	0x85, 0xcb, 0xe8, 0xf0, 0xf1, 0x3e, 0x87, 0x86, 0xaa, 0xd1, 0x3b, 0xc8, 0x84, 0x87, 0xaf, 0x34,
	0x86, 0x46, 0x76, 0xe0, 0xe8, 0x77, 0x25, 0x79, 0x1d, 0x2f, 0x0d, 0x1e, 0xcf, 0x6e, 0xf8, 0xc3,
	0xd5, 0x62, 0xe8, 0x59, 0xce, 0xa4, 0x55, 0xf2, 0x91, 0xa3, 0xa5, 0x98, 0x23, 0xa9, 0xc9, 0x2d,
	0x0e, 0x48, 0x59, 0x72, 0xbe, 0x28, 0x84, 0x1c, 0x52, 0x5d, 0xf2, 0x51, 0x26, 0xe9, 0x87, 0x08,
	0xc9, 0xe4, 0x84, 0xf1, 0x91, 0x61, 0xbc, 0x32, 0x4c, 0xba, 0xf4, 0x03, 0x8a, 0x7e, 0x00, 0x54,
	0x26, 0xfa, 0xb4, 0x38, 0xf2, 0xda, 0x3e, 0x75, 0xc2, 0x69, 0x12, 0x7d, 0x62, 0x54, 0x57, 0x58,
	0xf8, 0x77, 0x06, 0x66, 0xfd, 0x09, 0xfc, 0x84, 0x3a, 0x76, 0xc3, 0xe6, 0x3d, 0xf4, 0xbb, 0x6b,
	0x4c, 0xe2, 0x71, 0x1a, 0x53, 0xce, 0xa2, 0x13, 0x39, 0x3a, 0xff, 0xbc, 0x19, 0x35, 0x3e, 0x0b,
	0xf7, 0x29, 0xda, 0x44, 0xca, 0xfc, 0xc4, 0xf8, 0xbc, 0x49, 0x2a, 0xde, 0x73, 0x23, 0x20, 0x7d,
	0xa2, 0x42, 0xec, 0x66, 0x2a, 0xf7, 0x33, 0x09, 0x7c, 0x84, 0xef, 0x25, 0xdd, 0x5f, 0xbc, 0x82,
	0xa3, 0xbf, 0xa7, 0x60, 0x73, 0x80, 0x5a, 0xea, 0x89, 0xdf, 0x28, 0x19, 0x37, 0xdb, 0x9d, 0xe1,
	0x79, 0x39, 0x7c, 0x07, 0x5f, 0xca, 0x1d, 0xbc, 0xc0, 0xcf, 0x2e, 0xdd, 0x41, 0xbd, 0xc7, 0x03,
	0x90, 0xd8, 0xcc, 0xc7, 0x9b, 0xe9, 0x18, 0x41, 0xdb, 0x7c, 0x34, 0x92, 0x1f, 0xe9, 0x1c, 0x3f,
	0xdd, 0x64, 0xe7, 0xd8, 0x93, 0xfc, 0x1d, 0x7c, 0xff, 0x12, 0x7e, 0xd0, 0x41, 0x7e, 0x7f, 0xcd,
	0x0e, 0x12, 0x2f, 0x02, 0x3a, 0x47, 0xeb, 0x24, 0xc8, 0xba, 0x7e, 0xcb, 0x18, 0x9a, 0xbd, 0xf1,
	0xd6, 0x81, 0x3a, 0x37, 0xd1, 0x20, 0x9e, 0x4a, 0xdc, 0x43, 0xbc, 0x1d, 0xc7, 0x25, 0x34, 0x0a,
	0xe4, 0xdd, 0x44, 0x6d, 0xdb, 0x95, 0xc4, 0xc7, 0x18, 0x27, 0x1c, 0x70, 0xb0, 0xc6, 0xa1, 0xbf,
	0xa6, 0x20, 0x17, 0x85, 0x32, 0xfd, 0xb1, 0xe8, 0x90, 0xf0, 0x6f, 0x32, 0xb9, 0xf5, 0x44, 0x76,
	0xe4, 0x77, 0xe5, 0x27, 0xa3, 0xf9, 0x2c, 0xf6, 0x52, 0x7e, 0x82, 0xd5, 0xd8, 0x36, 0xbe, 0xf3,
	0x68, 0xbb, 0xd6, 0xb2, 0x59, 0xd2, 0x53, 0x19, 0xc1, 0x2f, 0x48, 0xfe, 0x33, 0xfc, 0xf8, 0x12,
	0xfe, 0xb9, 0x47, 0xdb, 0xbc, 0x65, 0xcb, 0x42, 0x75, 0x01, 0xcb, 0x31, 0x78, 0x8d, 0x5e, 0x03,
	0xfd, 0x5c, 0xa2, 0x9f, 0xe0, 0x87, 0x97, 0xa0, 0x39, 0x55, 0xe0, 0xc2, 0x3f, 0xc7, 0x20, 0x7d,
	0x60, 0x72, 0xb3, 0x6e, 0x32, 0x82, 0xca, 0xb0, 0xd0, 0x54, 0x59, 0x1d, 0xfe, 0x25, 0xf6, 0x13,
	0xca, 0x65, 0x74, 0x05, 0xbe, 0x85, 0xde, 0xc0, 0x52, 0x99, 0xf0, 0x03, 0xf1, 0x1c, 0x6d, 0xeb,
	0xd8, 0xa3, 0x1d, 0xe2, 0x71, 0x7b, 0x44, 0xa1, 0xdf, 0x08, 0xe5, 0x03, 0x8b, 0xf0, 0x2d, 0xf4,
	0xcb, 0x6b, 0xbe, 0xe6, 0x5b, 0xe8, 0x9b, 0xeb, 0xbf, 0xd3, 0x5b, 0x85, 0x69, 0x98, 0xaa, 0x12,
	0x7e, 0x41, 0xbd, 0x0f, 0xa5, 0x12, 0x64, 0xa8, 0xd7, 0xdc, 0xe3, 0x1e, 0x75, 0xf7, 0xcc, 0x8e,
	0x5d, 0x9a, 0x2a, 0x7b, 0x1d, 0xab, 0x78, 0x5c, 0x79, 0xff, 0x45, 0xd3, 0xe6, 0xad, 0x6e, 0x7d,
	0xcf, 0xa2, 0xed, 0xbc, 0xd0, 0x06, 0x4e, 0xf2, 0x4d, 0xba, 0x6b, 0x39, 0x36, 0x71, 0xf9, 0xae,
	0xfa, 0xdf, 0x89, 0xfa, 0xa4, 0xd4, 0xbd, 0xfc, 0x39, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x81, 0x1b,
	0x3b, 0xaf, 0x18, 0x00, 0x00,
}
