// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Return
	AccountList
	WitnessList
	AssetIssueList
	NodeList
	Node
	Address
	EmptyMessage
	NumberMessage
	BytesMessage
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protocol1 "github.com/tronprotocol/go-client-api/core"
import protocol2 "github.com/tronprotocol/go-client-api/core"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Return struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *Return) Reset()                    { *m = Return{} }
func (m *Return) String() string            { return proto.CompactTextString(m) }
func (*Return) ProtoMessage()               {}
func (*Return) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Return) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type AccountList struct {
	Accounts []*protocol1.Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *AccountList) Reset()                    { *m = AccountList{} }
func (m *AccountList) String() string            { return proto.CompactTextString(m) }
func (*AccountList) ProtoMessage()               {}
func (*AccountList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountList) GetAccounts() []*protocol1.Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type WitnessList struct {
	Witnesses []*protocol1.Witness `protobuf:"bytes,1,rep,name=witnesses" json:"witnesses,omitempty"`
}

func (m *WitnessList) Reset()                    { *m = WitnessList{} }
func (m *WitnessList) String() string            { return proto.CompactTextString(m) }
func (*WitnessList) ProtoMessage()               {}
func (*WitnessList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WitnessList) GetWitnesses() []*protocol1.Witness {
	if m != nil {
		return m.Witnesses
	}
	return nil
}

type AssetIssueList struct {
	AssetIssue []*protocol2.AssetIssueContract `protobuf:"bytes,1,rep,name=assetIssue" json:"assetIssue,omitempty"`
}

func (m *AssetIssueList) Reset()                    { *m = AssetIssueList{} }
func (m *AssetIssueList) String() string            { return proto.CompactTextString(m) }
func (*AssetIssueList) ProtoMessage()               {}
func (*AssetIssueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AssetIssueList) GetAssetIssue() []*protocol2.AssetIssueContract {
	if m != nil {
		return m.AssetIssue
	}
	return nil
}

// Gossip node list
type NodeList struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodeList) Reset()                    { *m = NodeList{} }
func (m *NodeList) String() string            { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()               {}
func (*NodeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeList) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Gossip node
type Node struct {
	Address *Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Node) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Gossip node address
type Address struct {
	Host []byte `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Address) GetHost() []byte {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type NumberMessage struct {
	Num int64 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *NumberMessage) Reset()                    { *m = NumberMessage{} }
func (m *NumberMessage) String() string            { return proto.CompactTextString(m) }
func (*NumberMessage) ProtoMessage()               {}
func (*NumberMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NumberMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BytesMessage struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *BytesMessage) Reset()                    { *m = BytesMessage{} }
func (m *BytesMessage) String() string            { return proto.CompactTextString(m) }
func (*BytesMessage) ProtoMessage()               {}
func (*BytesMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BytesMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Return)(nil), "protocol.Return")
	proto.RegisterType((*AccountList)(nil), "protocol.AccountList")
	proto.RegisterType((*WitnessList)(nil), "protocol.WitnessList")
	proto.RegisterType((*AssetIssueList)(nil), "protocol.AssetIssueList")
	proto.RegisterType((*NodeList)(nil), "protocol.NodeList")
	proto.RegisterType((*Node)(nil), "protocol.Node")
	proto.RegisterType((*Address)(nil), "protocol.Address")
	proto.RegisterType((*EmptyMessage)(nil), "protocol.EmptyMessage")
	proto.RegisterType((*NumberMessage)(nil), "protocol.NumberMessage")
	proto.RegisterType((*BytesMessage)(nil), "protocol.BytesMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wallet service

type WalletClient interface {
	GetAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*protocol1.Account, error)
	CreateTransaction(ctx context.Context, in *protocol2.TransferContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	BroadcastTransaction(ctx context.Context, in *protocol1.Transaction, opts ...grpc.CallOption) (*Return, error)
	ListAccounts(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AccountList, error)
	UpdateAccount(ctx context.Context, in *protocol2.AccountUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	CreateAccount(ctx context.Context, in *protocol2.AccountCreateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	VoteWitnessAccount(ctx context.Context, in *protocol2.VoteWitnessContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	CreateAssetIssue(ctx context.Context, in *protocol2.AssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	UpdateWitness(ctx context.Context, in *protocol2.WitnessUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	CreateWitness(ctx context.Context, in *protocol2.WitnessCreateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	TransferAsset(ctx context.Context, in *protocol2.TransferAssetContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	ParticipateAssetIssue(ctx context.Context, in *protocol2.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error)
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol2.AssetIssueContract, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error)
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.DynamicProperties, error)
}

type walletClient struct {
	cc *grpc.ClientConn
}

func NewWalletClient(cc *grpc.ClientConn) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*protocol1.Account, error) {
	out := new(protocol1.Account)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction(ctx context.Context, in *protocol2.TransferContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BroadcastTransaction(ctx context.Context, in *protocol1.Transaction, opts ...grpc.CallOption) (*Return, error) {
	out := new(Return)
	err := grpc.Invoke(ctx, "/protocol.Wallet/BroadcastTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListAccounts(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ListAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount(ctx context.Context, in *protocol2.AccountUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount(ctx context.Context, in *protocol2.AccountCreateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount(ctx context.Context, in *protocol2.VoteWitnessContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue(ctx context.Context, in *protocol2.AssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ListWitnesses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness(ctx context.Context, in *protocol2.WitnessUpdateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/UpdateWitness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness(ctx context.Context, in *protocol2.WitnessCreateContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/CreateWitness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset(ctx context.Context, in *protocol2.TransferAssetContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/TransferAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue(ctx context.Context, in *protocol2.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*protocol1.Transaction, error) {
	out := new(protocol1.Transaction)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/ListNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByAccount(ctx context.Context, in *protocol1.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*protocol2.AssetIssueContract, error) {
	out := new(protocol2.AssetIssueContract)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetNowBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*protocol1.Block, error) {
	out := new(protocol1.Block)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := grpc.Invoke(ctx, "/protocol.Wallet/TotalTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*protocol1.DynamicProperties, error) {
	out := new(protocol1.DynamicProperties)
	err := grpc.Invoke(ctx, "/protocol.Wallet/GetDynamicProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wallet service

type WalletServer interface {
	GetAccount(context.Context, *protocol1.Account) (*protocol1.Account, error)
	CreateTransaction(context.Context, *protocol2.TransferContract) (*protocol1.Transaction, error)
	BroadcastTransaction(context.Context, *protocol1.Transaction) (*Return, error)
	ListAccounts(context.Context, *EmptyMessage) (*AccountList, error)
	UpdateAccount(context.Context, *protocol2.AccountUpdateContract) (*protocol1.Transaction, error)
	CreateAccount(context.Context, *protocol2.AccountCreateContract) (*protocol1.Transaction, error)
	VoteWitnessAccount(context.Context, *protocol2.VoteWitnessContract) (*protocol1.Transaction, error)
	CreateAssetIssue(context.Context, *protocol2.AssetIssueContract) (*protocol1.Transaction, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	UpdateWitness(context.Context, *protocol2.WitnessUpdateContract) (*protocol1.Transaction, error)
	CreateWitness(context.Context, *protocol2.WitnessCreateContract) (*protocol1.Transaction, error)
	TransferAsset(context.Context, *protocol2.TransferAssetContract) (*protocol1.Transaction, error)
	ParticipateAssetIssue(context.Context, *protocol2.ParticipateAssetIssueContract) (*protocol1.Transaction, error)
	ListNodes(context.Context, *EmptyMessage) (*NodeList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetAssetIssueByAccount(context.Context, *protocol1.Account) (*AssetIssueList, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*protocol2.AssetIssueContract, error)
	GetNowBlock(context.Context, *EmptyMessage) (*protocol1.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*protocol1.Block, error)
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetDynamicProperties(context.Context, *EmptyMessage) (*protocol1.DynamicProperties, error)
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction(ctx, req.(*protocol2.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BroadcastTransaction(ctx, req.(*protocol1.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListAccounts(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount(ctx, req.(*protocol2.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount(ctx, req.(*protocol2.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount(ctx, req.(*protocol2.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue(ctx, req.(*protocol2.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness(ctx, req.(*protocol2.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness(ctx, req.(*protocol2.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset(ctx, req.(*protocol2.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol2.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, req.(*protocol2.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol1.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, req.(*protocol1.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TotalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDynamicProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDynamicProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetDynamicProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDynamicProperties(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Wallet_CreateTransaction_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _Wallet_BroadcastTransaction_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Wallet_ListAccounts_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Wallet_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Wallet_CreateAccount_Handler,
		},
		{
			MethodName: "VoteWitnessAccount",
			Handler:    _Wallet_VoteWitnessAccount_Handler,
		},
		{
			MethodName: "CreateAssetIssue",
			Handler:    _Wallet_CreateAssetIssue_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _Wallet_ListWitnesses_Handler,
		},
		{
			MethodName: "UpdateWitness",
			Handler:    _Wallet_UpdateWitness_Handler,
		},
		{
			MethodName: "CreateWitness",
			Handler:    _Wallet_CreateWitness_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Wallet_TransferAsset_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue",
			Handler:    _Wallet_ParticipateAssetIssue_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Wallet_ListNodes_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _Wallet_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _Wallet_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _Wallet_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Wallet_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Wallet_GetBlockByNum_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _Wallet_TotalTransaction_Handler,
		},
		{
			MethodName: "GetDynamicProperties",
			Handler:    _Wallet_GetDynamicProperties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// Client API for Database service

type DatabaseClient interface {
}

type databaseClient struct {
	cc *grpc.ClientConn
}

func NewDatabaseClient(cc *grpc.ClientConn) DatabaseClient {
	return &databaseClient{cc}
}

// Server API for Database service

type DatabaseServer interface {
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}

// Client API for Network service

type NetworkClient interface {
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

// Server API for Network service

type NetworkServer interface {
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xef, 0x6f, 0x1a, 0x47,
	0x10, 0x85, 0xda, 0x06, 0x3c, 0x80, 0x8d, 0xd7, 0x3f, 0x8a, 0x68, 0xab, 0xd2, 0x95, 0xa5, 0xba,
	0xaa, 0x0c, 0x2d, 0xee, 0x87, 0x46, 0xb1, 0x92, 0x70, 0xb6, 0x45, 0x90, 0x6c, 0x64, 0x9d, 0x9c,
	0x58, 0xc9, 0xb7, 0xe5, 0xd8, 0xe0, 0x93, 0x8f, 0xdb, 0xd3, 0xee, 0x5c, 0x2c, 0xfe, 0xdd, 0xfc,
	0x25, 0xd1, 0xfd, 0xe2, 0x16, 0xc3, 0x81, 0xf3, 0x89, 0xdb, 0x37, 0x6f, 0xde, 0xce, 0xbe, 0x9d,
	0x1d, 0x01, 0x55, 0xe6, 0xd9, 0x6d, 0xe6, 0xd9, 0x2d, 0x4f, 0x0a, 0x14, 0xa4, 0x14, 0xfe, 0x58,
	0xc2, 0x69, 0xec, 0x5a, 0x42, 0xf2, 0xf6, 0x9d, 0x14, 0x6e, 0x14, 0x6a, 0xec, 0x87, 0xc0, 0x85,
	0x70, 0x51, 0x32, 0x0b, 0x23, 0x90, 0x36, 0xa1, 0x60, 0x72, 0xf4, 0xa5, 0x4b, 0x8e, 0xa0, 0x20,
	0xb9, 0xf2, 0x1d, 0xac, 0xe7, 0x9b, 0xf9, 0x93, 0x92, 0x19, 0xaf, 0xe8, 0x39, 0x94, 0xbb, 0x96,
	0x25, 0x7c, 0x17, 0xaf, 0x6d, 0x85, 0xe4, 0x14, 0x4a, 0x2c, 0x5a, 0xaa, 0x7a, 0xbe, 0xb9, 0x71,
	0x52, 0xee, 0xec, 0xb5, 0x92, 0x3d, 0x5b, 0x31, 0xd1, 0x9c, 0x51, 0xe8, 0x1b, 0x28, 0xdf, 0xdb,
	0xe8, 0x72, 0xa5, 0xc2, 0xec, 0x36, 0x6c, 0x3f, 0x45, 0x4b, 0xbe, 0x24, 0x3d, 0x66, 0x9a, 0x29,
	0x87, 0x0e, 0x60, 0xa7, 0xab, 0x14, 0xc7, 0xbe, 0x52, 0x3e, 0x0f, 0x25, 0xce, 0x01, 0xd8, 0x0c,
	0x89, 0x35, 0x7e, 0xd5, 0x4a, 0x98, 0xc5, 0x92, 0x93, 0x9a, 0x1a, 0x9f, 0xfe, 0x03, 0xa5, 0x81,
	0x18, 0x45, 0x4a, 0xc7, 0xb0, 0xe5, 0x8a, 0xd1, 0xac, 0x90, 0x9d, 0x54, 0x24, 0xa0, 0x98, 0x51,
	0x90, 0x9e, 0xc1, 0x66, 0xb0, 0x24, 0x7f, 0x43, 0x91, 0x8d, 0x46, 0x92, 0x2b, 0x15, 0x1a, 0x34,
	0x7f, 0xee, 0x28, 0x60, 0x26, 0x0c, 0xfa, 0x2f, 0x14, 0x63, 0x8c, 0x10, 0xd8, 0x7c, 0x10, 0x2a,
	0x72, 0xb5, 0x62, 0x86, 0xdf, 0x01, 0xe6, 0x09, 0x89, 0xf5, 0x9f, 0x9a, 0xf9, 0x93, 0x2d, 0x33,
	0xfc, 0xa6, 0x3b, 0x50, 0xb9, 0x9a, 0x78, 0x38, 0xbd, 0xe1, 0x4a, 0xb1, 0x31, 0xa7, 0x7f, 0x40,
	0x75, 0xe0, 0x4f, 0x86, 0x5c, 0xc6, 0x00, 0xa9, 0xc1, 0x86, 0xeb, 0x4f, 0x42, 0x9d, 0x0d, 0x33,
	0xf8, 0xa4, 0xc7, 0x50, 0x31, 0xa6, 0xc8, 0x55, 0xc2, 0x38, 0x80, 0xad, 0xaf, 0xcc, 0x09, 0x5d,
	0x09, 0xf6, 0x8a, 0x16, 0x9d, 0x6f, 0x65, 0x28, 0xdc, 0x33, 0xc7, 0xe1, 0x48, 0xfe, 0x03, 0xe8,
	0x71, 0x8c, 0x6f, 0x89, 0x2c, 0x5e, 0x5c, 0x63, 0x11, 0xa2, 0x39, 0xf2, 0x1e, 0xf6, 0x2e, 0x24,
	0x67, 0xc8, 0xef, 0x24, 0x73, 0x15, 0xb3, 0xd0, 0x16, 0x2e, 0x69, 0xa4, 0xcc, 0x10, 0xfe, 0xc2,
	0x65, 0x62, 0x78, 0xe3, 0xf0, 0x59, 0x2c, 0x4a, 0xa1, 0x39, 0xd2, 0x85, 0x03, 0x43, 0x0a, 0x36,
	0xb2, 0x98, 0x42, 0x5d, 0x6c, 0x79, 0x42, 0xa3, 0x96, 0xc2, 0x51, 0x93, 0xd2, 0x1c, 0x79, 0x0b,
	0x95, 0xe0, 0xf2, 0xe2, 0xea, 0x14, 0x39, 0x4a, 0x39, 0xba, 0x7d, 0x7a, 0x0d, 0x5a, 0xfb, 0xd2,
	0x1c, 0xe9, 0x43, 0xf5, 0x83, 0x37, 0x62, 0xc8, 0x13, 0x1b, 0x7e, 0x5f, 0x60, 0x46, 0xf1, 0xf5,
	0xc7, 0xe9, 0x43, 0x35, 0x32, 0x26, 0x5b, 0x2a, 0x8a, 0xaf, 0x97, 0xba, 0x06, 0xf2, 0x51, 0x20,
	0x8f, 0x5f, 0x40, 0xa2, 0xf7, 0x5b, 0x4a, 0xd7, 0xa2, 0x2f, 0x29, 0xac, 0x16, 0x17, 0x36, 0xeb,
	0x7c, 0xb2, 0xf2, 0x8d, 0x64, 0x4b, 0xbd, 0x83, 0x6a, 0x60, 0xdc, 0x7d, 0xf2, 0x22, 0x5f, 0x62,
	0xb8, 0xf6, 0xe2, 0x75, 0xc3, 0x63, 0x58, 0x77, 0x29, 0x86, 0x7e, 0xd8, 0xf0, 0x6c, 0xa9, 0x97,
	0x1a, 0xde, 0x87, 0x6a, 0xd2, 0xb7, 0xa1, 0x1d, 0xba, 0xd4, 0x5c, 0x60, 0xbd, 0xd4, 0x27, 0x38,
	0xbc, 0x65, 0x12, 0x6d, 0xcb, 0xf6, 0xe6, 0x2d, 0xff, 0x33, 0xcd, 0x58, 0x4a, 0x58, 0x2f, 0xfd,
	0x0a, 0xb6, 0x03, 0x17, 0x83, 0x01, 0x94, 0xed, 0x3c, 0x99, 0x1f, 0x5c, 0xb1, 0xed, 0x3d, 0xd8,
	0x0b, 0xde, 0xfa, 0xfc, 0xf0, 0xcc, 0x92, 0xa8, 0x2f, 0x6b, 0x8e, 0x99, 0xd0, 0xd1, 0x9c, 0x90,
	0x31, 0x5d, 0x31, 0x40, 0x56, 0x09, 0xdd, 0xc0, 0xfe, 0x33, 0xa1, 0x01, 0x9b, 0x70, 0xbd, 0x26,
	0x7d, 0x9a, 0x35, 0x56, 0x36, 0x2c, 0xcd, 0x91, 0xff, 0xa1, 0xdc, 0xe3, 0x38, 0x10, 0x4f, 0x86,
	0x23, 0xac, 0xc7, 0xcc, 0xa3, 0xed, 0x6a, 0xf2, 0x01, 0x91, 0xe6, 0xc8, 0x6b, 0xa8, 0xf6, 0x38,
	0x86, 0x2b, 0x63, 0x3a, 0xf0, 0x27, 0xe4, 0x67, 0xcd, 0x41, 0x7d, 0xe6, 0x2e, 0x4b, 0xbe, 0x82,
	0xda, 0x9d, 0x40, 0xe6, 0xe8, 0xf3, 0x2b, 0x6b, 0xef, 0x2c, 0xdd, 0xd0, 0x8c, 0x83, 0x1e, 0xc7,
	0xcb, 0xa9, 0xcb, 0x26, 0xb6, 0x75, 0x2b, 0x85, 0xc7, 0x25, 0xda, 0x2b, 0x2e, 0xf9, 0x97, 0x14,
	0x5f, 0x48, 0xa2, 0xb9, 0x0e, 0x40, 0xe9, 0x92, 0x21, 0x1b, 0x32, 0xc5, 0x3b, 0xdb, 0x50, 0x1c,
	0x70, 0x7c, 0x12, 0xf2, 0xd1, 0x30, 0xa0, 0x22, 0xe4, 0xb8, 0x85, 0xc1, 0xbf, 0x00, 0xe6, 0xd9,
	0x46, 0xb1, 0x27, 0x3d, 0xab, 0x7b, 0xdb, 0xff, 0xfc, 0xd7, 0xd8, 0xc6, 0x07, 0x7f, 0xd8, 0xb2,
	0xc4, 0xa4, 0x1d, 0x44, 0x13, 0xf1, 0xf6, 0x58, 0x9c, 0x5a, 0x8e, 0xcd, 0x5d, 0x3c, 0x8d, 0xff,
	0x58, 0x0c, 0x0b, 0x61, 0xec, 0xec, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x35, 0xd0, 0x62,
	0x6a, 0x08, 0x00, 0x00,
}
