// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core/Tron.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AccountType int32

const (
	AccountType_Normal     AccountType = 0
	AccountType_AssetIssue AccountType = 1
	AccountType_Contract   AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "Normal",
	1: "AssetIssue",
	2: "Contract",
}
var AccountType_value = map[string]int32{
	"Normal":     0,
	"AssetIssue": 1,
	"Contract":   2,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type ReasonCode int32

const (
	ReasonCode_REQUESTED             ReasonCode = 0
	ReasonCode_TCP_ERROR             ReasonCode = 1
	ReasonCode_BAD_PROTOCOL          ReasonCode = 2
	ReasonCode_USELESS_PEER          ReasonCode = 3
	ReasonCode_TOO_MANY_PEERS        ReasonCode = 4
	ReasonCode_DUPLICATE_PEER        ReasonCode = 5
	ReasonCode_INCOMPATIBLE_PROTOCOL ReasonCode = 6
	ReasonCode_NULL_IDENTITY         ReasonCode = 7
	ReasonCode_PEER_QUITING          ReasonCode = 8
	ReasonCode_UNEXPECTED_IDENTITY   ReasonCode = 9
	ReasonCode_LOCAL_IDENTITY        ReasonCode = 10
	ReasonCode_PING_TIMEOUT          ReasonCode = 11
	ReasonCode_USER_REASON           ReasonCode = 12
	ReasonCode_RESET                 ReasonCode = 16
	ReasonCode_UNKNOWN               ReasonCode = 255
)

var ReasonCode_name = map[int32]string{
	0:   "REQUESTED",
	1:   "TCP_ERROR",
	2:   "BAD_PROTOCOL",
	3:   "USELESS_PEER",
	4:   "TOO_MANY_PEERS",
	5:   "DUPLICATE_PEER",
	6:   "INCOMPATIBLE_PROTOCOL",
	7:   "NULL_IDENTITY",
	8:   "PEER_QUITING",
	9:   "UNEXPECTED_IDENTITY",
	10:  "LOCAL_IDENTITY",
	11:  "PING_TIMEOUT",
	12:  "USER_REASON",
	16:  "RESET",
	255: "UNKNOWN",
}
var ReasonCode_value = map[string]int32{
	"REQUESTED":             0,
	"TCP_ERROR":             1,
	"BAD_PROTOCOL":          2,
	"USELESS_PEER":          3,
	"TOO_MANY_PEERS":        4,
	"DUPLICATE_PEER":        5,
	"INCOMPATIBLE_PROTOCOL": 6,
	"NULL_IDENTITY":         7,
	"PEER_QUITING":          8,
	"UNEXPECTED_IDENTITY":   9,
	"LOCAL_IDENTITY":        10,
	"PING_TIMEOUT":          11,
	"USER_REASON":           12,
	"RESET":                 16,
	"UNKNOWN":               255,
}

func (x ReasonCode) String() string {
	return proto.EnumName(ReasonCode_name, int32(x))
}
func (ReasonCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type Transaction_TransactionType int32

const (
	Transaction_UtxoType     Transaction_TransactionType = 0
	Transaction_ContractType Transaction_TransactionType = 1
)

var Transaction_TransactionType_name = map[int32]string{
	0: "UtxoType",
	1: "ContractType",
}
var Transaction_TransactionType_value = map[string]int32{
	"UtxoType":     0,
	"ContractType": 1,
}

func (x Transaction_TransactionType) String() string {
	return proto.EnumName(Transaction_TransactionType_name, int32(x))
}
func (Transaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5, 0}
}

type Transaction_Contract_ContractType int32

const (
	Transaction_Contract_AccountCreateContract         Transaction_Contract_ContractType = 0
	Transaction_Contract_TransferContract              Transaction_Contract_ContractType = 1
	Transaction_Contract_TransferAssetContract         Transaction_Contract_ContractType = 2
	Transaction_Contract_VoteAssetContract             Transaction_Contract_ContractType = 3
	Transaction_Contract_VoteWitnessContract           Transaction_Contract_ContractType = 4
	Transaction_Contract_WitnessCreateContract         Transaction_Contract_ContractType = 5
	Transaction_Contract_AssetIssueContract            Transaction_Contract_ContractType = 6
	Transaction_Contract_DeployContract                Transaction_Contract_ContractType = 7
	Transaction_Contract_WitnessUpdateContract         Transaction_Contract_ContractType = 8
	Transaction_Contract_ParticipateAssetIssueContract Transaction_Contract_ContractType = 9
)

var Transaction_Contract_ContractType_name = map[int32]string{
	0: "AccountCreateContract",
	1: "TransferContract",
	2: "TransferAssetContract",
	3: "VoteAssetContract",
	4: "VoteWitnessContract",
	5: "WitnessCreateContract",
	6: "AssetIssueContract",
	7: "DeployContract",
	8: "WitnessUpdateContract",
	9: "ParticipateAssetIssueContract",
}
var Transaction_Contract_ContractType_value = map[string]int32{
	"AccountCreateContract":         0,
	"TransferContract":              1,
	"TransferAssetContract":         2,
	"VoteAssetContract":             3,
	"VoteWitnessContract":           4,
	"WitnessCreateContract":         5,
	"AssetIssueContract":            6,
	"DeployContract":                7,
	"WitnessUpdateContract":         8,
	"ParticipateAssetIssueContract": 9,
}

func (x Transaction_Contract_ContractType) String() string {
	return proto.EnumName(Transaction_Contract_ContractType_name, int32(x))
}
func (Transaction_Contract_ContractType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{5, 0, 0}
}

type Transaction_ResultCode int32

const (
	Transaction_Result_SUCESS Transaction_ResultCode = 0
	Transaction_Result_FAILED Transaction_ResultCode = 1
)

var Transaction_ResultCode_name = map[int32]string{
	0: "SUCESS",
	1: "FAILED",
}
var Transaction_ResultCode_value = map[string]int32{
	"SUCESS": 0,
	"FAILED": 1,
}

func (x Transaction_ResultCode) String() string {
	return proto.EnumName(Transaction_ResultCode_name, int32(x))
}
func (Transaction_ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5, 1, 0} }

type BlockInventory_Type int32

const (
	BlockInventory_SYNC    BlockInventory_Type = 0
	BlockInventory_ADVTISE BlockInventory_Type = 1
	BlockInventory_FETCH   BlockInventory_Type = 2
)

var BlockInventory_Type_name = map[int32]string{
	0: "SYNC",
	1: "ADVTISE",
	2: "FETCH",
}
var BlockInventory_Type_value = map[string]int32{
	"SYNC":    0,
	"ADVTISE": 1,
	"FETCH":   2,
}

func (x BlockInventory_Type) String() string {
	return proto.EnumName(BlockInventory_Type_name, int32(x))
}
func (BlockInventory_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{9, 0} }

type Inventory_InventoryType int32

const (
	Inventory_TRX   Inventory_InventoryType = 0
	Inventory_BLOCK Inventory_InventoryType = 1
)

var Inventory_InventoryType_name = map[int32]string{
	0: "TRX",
	1: "BLOCK",
}
var Inventory_InventoryType_value = map[string]int32{
	"TRX":   0,
	"BLOCK": 1,
}

func (x Inventory_InventoryType) String() string {
	return proto.EnumName(Inventory_InventoryType_name, int32(x))
}
func (Inventory_InventoryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{10, 0} }

type Items_ItemType int32

const (
	Items_ERR         Items_ItemType = 0
	Items_TRX         Items_ItemType = 1
	Items_BLOCK       Items_ItemType = 2
	Items_BLOCKHEADER Items_ItemType = 3
)

var Items_ItemType_name = map[int32]string{
	0: "ERR",
	1: "TRX",
	2: "BLOCK",
	3: "BLOCKHEADER",
}
var Items_ItemType_value = map[string]int32{
	"ERR":         0,
	"TRX":         1,
	"BLOCK":       2,
	"BLOCKHEADER": 3,
}

func (x Items_ItemType) String() string {
	return proto.EnumName(Items_ItemType_name, int32(x))
}
func (Items_ItemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{11, 0} }

// Account
type Account struct {
	AccountName        []byte           `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Type               AccountType      `protobuf:"varint,2,opt,name=type,enum=protocol.AccountType" json:"type,omitempty"`
	Address            []byte           `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Balance            int64            `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
	Votes              []*Account_Vote  `protobuf:"bytes,5,rep,name=votes" json:"votes,omitempty"`
	Asset              map[string]int64 `protobuf:"bytes,6,rep,name=asset" json:"asset,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LatestOprationTime int64            `protobuf:"varint,10,opt,name=latest_opration_time,json=latestOprationTime" json:"latest_opration_time,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Account) GetAccountName() []byte {
	if m != nil {
		return m.AccountName
	}
	return nil
}

func (m *Account) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_Normal
}

func (m *Account) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetVotes() []*Account_Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Account) GetAsset() map[string]int64 {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *Account) GetLatestOprationTime() int64 {
	if m != nil {
		return m.LatestOprationTime
	}
	return 0
}

type Account_Vote struct {
	VoteAddress []byte `protobuf:"bytes,1,opt,name=vote_address,json=voteAddress,proto3" json:"vote_address,omitempty"`
	VoteCount   int64  `protobuf:"varint,2,opt,name=vote_count,json=voteCount" json:"vote_count,omitempty"`
}

func (m *Account_Vote) Reset()                    { *m = Account_Vote{} }
func (m *Account_Vote) String() string            { return proto.CompactTextString(m) }
func (*Account_Vote) ProtoMessage()               {}
func (*Account_Vote) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *Account_Vote) GetVoteAddress() []byte {
	if m != nil {
		return m.VoteAddress
	}
	return nil
}

func (m *Account_Vote) GetVoteCount() int64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

// Witness
type Witness struct {
	Address        []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VoteCount      int64  `protobuf:"varint,2,opt,name=voteCount" json:"voteCount,omitempty"`
	PubKey         []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Url            string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	TotalProduced  int64  `protobuf:"varint,5,opt,name=totalProduced" json:"totalProduced,omitempty"`
	TotalMissed    int64  `protobuf:"varint,6,opt,name=totalMissed" json:"totalMissed,omitempty"`
	LatestBlockNum int64  `protobuf:"varint,7,opt,name=latestBlockNum" json:"latestBlockNum,omitempty"`
	LatestSlotNum  int64  `protobuf:"varint,8,opt,name=latestSlotNum" json:"latestSlotNum,omitempty"`
	IsJobs         bool   `protobuf:"varint,9,opt,name=isJobs" json:"isJobs,omitempty"`
}

func (m *Witness) Reset()                    { *m = Witness{} }
func (m *Witness) String() string            { return proto.CompactTextString(m) }
func (*Witness) ProtoMessage()               {}
func (*Witness) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Witness) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Witness) GetVoteCount() int64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

func (m *Witness) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Witness) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Witness) GetTotalProduced() int64 {
	if m != nil {
		return m.TotalProduced
	}
	return 0
}

func (m *Witness) GetTotalMissed() int64 {
	if m != nil {
		return m.TotalMissed
	}
	return 0
}

func (m *Witness) GetLatestBlockNum() int64 {
	if m != nil {
		return m.LatestBlockNum
	}
	return 0
}

func (m *Witness) GetLatestSlotNum() int64 {
	if m != nil {
		return m.LatestSlotNum
	}
	return 0
}

func (m *Witness) GetIsJobs() bool {
	if m != nil {
		return m.IsJobs
	}
	return false
}

type TXOutput struct {
	Value      int64  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	PubKeyHash []byte `protobuf:"bytes,2,opt,name=pubKeyHash,proto3" json:"pubKeyHash,omitempty"`
}

func (m *TXOutput) Reset()                    { *m = TXOutput{} }
func (m *TXOutput) String() string            { return proto.CompactTextString(m) }
func (*TXOutput) ProtoMessage()               {}
func (*TXOutput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TXOutput) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TXOutput) GetPubKeyHash() []byte {
	if m != nil {
		return m.PubKeyHash
	}
	return nil
}

type TXInput struct {
	RawData   *TXInputRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	Signature []byte      `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *TXInput) Reset()                    { *m = TXInput{} }
func (m *TXInput) String() string            { return proto.CompactTextString(m) }
func (*TXInput) ProtoMessage()               {}
func (*TXInput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *TXInput) GetRawData() *TXInputRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *TXInput) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TXInputRaw struct {
	TxID   []byte `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	Vout   int64  `protobuf:"varint,2,opt,name=vout" json:"vout,omitempty"`
	PubKey []byte `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *TXInputRaw) Reset()                    { *m = TXInputRaw{} }
func (m *TXInputRaw) String() string            { return proto.CompactTextString(m) }
func (*TXInputRaw) ProtoMessage()               {}
func (*TXInputRaw) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3, 0} }

func (m *TXInputRaw) GetTxID() []byte {
	if m != nil {
		return m.TxID
	}
	return nil
}

func (m *TXInputRaw) GetVout() int64 {
	if m != nil {
		return m.Vout
	}
	return 0
}

func (m *TXInputRaw) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type TXOutputs struct {
	Outputs []*TXOutput `protobuf:"bytes,1,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *TXOutputs) Reset()                    { *m = TXOutputs{} }
func (m *TXOutputs) String() string            { return proto.CompactTextString(m) }
func (*TXOutputs) ProtoMessage()               {}
func (*TXOutputs) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *TXOutputs) GetOutputs() []*TXOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type Transaction struct {
	RawData   *TransactionRaw       `protobuf:"bytes,1,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	Signature [][]byte              `protobuf:"bytes,2,rep,name=signature,proto3" json:"signature,omitempty"`
	Ret       []*Transaction_Result `protobuf:"bytes,5,rep,name=ret" json:"ret,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Transaction) GetRawData() *TransactionRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *Transaction) GetSignature() [][]byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetRet() []*Transaction_Result {
	if m != nil {
		return m.Ret
	}
	return nil
}

type Transaction_Contract struct {
	Type      Transaction_Contract_ContractType `protobuf:"varint,1,opt,name=type,enum=protocol.Transaction_Contract_ContractType" json:"type,omitempty"`
	Parameter *google_protobuf.Any              `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
}

func (m *Transaction_Contract) Reset()                    { *m = Transaction_Contract{} }
func (m *Transaction_Contract) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Contract) ProtoMessage()               {}
func (*Transaction_Contract) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5, 0} }

func (m *Transaction_Contract) GetType() Transaction_Contract_ContractType {
	if m != nil {
		return m.Type
	}
	return Transaction_Contract_AccountCreateContract
}

func (m *Transaction_Contract) GetParameter() *google_protobuf.Any {
	if m != nil {
		return m.Parameter
	}
	return nil
}

type Transaction_Result struct {
	Fee int64                  `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
	Ret Transaction_ResultCode `protobuf:"varint,2,opt,name=ret,enum=protocol.Transaction_ResultCode" json:"ret,omitempty"`
}

func (m *Transaction_Result) Reset()                    { *m = Transaction_Result{} }
func (m *Transaction_Result) String() string            { return proto.CompactTextString(m) }
func (*Transaction_Result) ProtoMessage()               {}
func (*Transaction_Result) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5, 1} }

func (m *Transaction_Result) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction_Result) GetRet() Transaction_ResultCode {
	if m != nil {
		return m.Ret
	}
	return Transaction_Result_SUCESS
}

type TransactionRaw struct {
	Type       Transaction_TransactionType `protobuf:"varint,2,opt,name=type,enum=protocol.Transaction_TransactionType" json:"type,omitempty"`
	Expiration int64                       `protobuf:"varint,8,opt,name=expiration" json:"expiration,omitempty"`
	Data       []byte                      `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	Contract   []*Transaction_Contract     `protobuf:"bytes,11,rep,name=contract" json:"contract,omitempty"`
	Scripts    []byte                      `protobuf:"bytes,16,opt,name=scripts,proto3" json:"scripts,omitempty"`
	Timestamp  int64                       `protobuf:"varint,17,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TransactionRaw) Reset()                    { *m = TransactionRaw{} }
func (m *TransactionRaw) String() string            { return proto.CompactTextString(m) }
func (*TransactionRaw) ProtoMessage()               {}
func (*TransactionRaw) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5, 2} }

func (m *TransactionRaw) GetType() Transaction_TransactionType {
	if m != nil {
		return m.Type
	}
	return Transaction_UtxoType
}

func (m *TransactionRaw) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TransactionRaw) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionRaw) GetContract() []*Transaction_Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *TransactionRaw) GetScripts() []byte {
	if m != nil {
		return m.Scripts
	}
	return nil
}

func (m *TransactionRaw) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type BlockHeader struct {
	RawData          *BlockHeaderRaw `protobuf:"bytes,1,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	WitnessSignature []byte          `protobuf:"bytes,2,opt,name=witness_signature,json=witnessSignature,proto3" json:"witness_signature,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *BlockHeader) GetRawData() *BlockHeaderRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *BlockHeader) GetWitnessSignature() []byte {
	if m != nil {
		return m.WitnessSignature
	}
	return nil
}

type BlockHeaderRaw struct {
	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TxTrieRoot []byte `protobuf:"bytes,2,opt,name=txTrieRoot,proto3" json:"txTrieRoot,omitempty"`
	ParentHash []byte `protobuf:"bytes,3,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	// bytes nonce = 5;
	// bytes difficulty = 6;
	Number         int64  `protobuf:"varint,7,opt,name=number" json:"number,omitempty"`
	WitnessId      int64  `protobuf:"varint,8,opt,name=witness_id,json=witnessId" json:"witness_id,omitempty"`
	WitnessAddress []byte `protobuf:"bytes,9,opt,name=witness_address,json=witnessAddress,proto3" json:"witness_address,omitempty"`
}

func (m *BlockHeaderRaw) Reset()                    { *m = BlockHeaderRaw{} }
func (m *BlockHeaderRaw) String() string            { return proto.CompactTextString(m) }
func (*BlockHeaderRaw) ProtoMessage()               {}
func (*BlockHeaderRaw) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6, 0} }

func (m *BlockHeaderRaw) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeaderRaw) GetTxTrieRoot() []byte {
	if m != nil {
		return m.TxTrieRoot
	}
	return nil
}

func (m *BlockHeaderRaw) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *BlockHeaderRaw) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockHeaderRaw) GetWitnessId() int64 {
	if m != nil {
		return m.WitnessId
	}
	return 0
}

func (m *BlockHeaderRaw) GetWitnessAddress() []byte {
	if m != nil {
		return m.WitnessAddress
	}
	return nil
}

// block
type Block struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	BlockHeader  *BlockHeader   `protobuf:"bytes,2,opt,name=block_header,json=blockHeader" json:"block_header,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

type ChainInventory struct {
	Ids       []*ChainInventory_BlockId `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	RemainNum int64                     `protobuf:"varint,2,opt,name=remain_num,json=remainNum" json:"remain_num,omitempty"`
}

func (m *ChainInventory) Reset()                    { *m = ChainInventory{} }
func (m *ChainInventory) String() string            { return proto.CompactTextString(m) }
func (*ChainInventory) ProtoMessage()               {}
func (*ChainInventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ChainInventory) GetIds() []*ChainInventory_BlockId {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ChainInventory) GetRemainNum() int64 {
	if m != nil {
		return m.RemainNum
	}
	return 0
}

type ChainInventory_BlockId struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number int64  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *ChainInventory_BlockId) Reset()                    { *m = ChainInventory_BlockId{} }
func (m *ChainInventory_BlockId) String() string            { return proto.CompactTextString(m) }
func (*ChainInventory_BlockId) ProtoMessage()               {}
func (*ChainInventory_BlockId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8, 0} }

func (m *ChainInventory_BlockId) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ChainInventory_BlockId) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Inventory
type BlockInventory struct {
	Ids  []*BlockInventory_BlockId `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Type BlockInventory_Type       `protobuf:"varint,2,opt,name=type,enum=protocol.BlockInventory_Type" json:"type,omitempty"`
}

func (m *BlockInventory) Reset()                    { *m = BlockInventory{} }
func (m *BlockInventory) String() string            { return proto.CompactTextString(m) }
func (*BlockInventory) ProtoMessage()               {}
func (*BlockInventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *BlockInventory) GetIds() []*BlockInventory_BlockId {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *BlockInventory) GetType() BlockInventory_Type {
	if m != nil {
		return m.Type
	}
	return BlockInventory_SYNC
}

type BlockInventory_BlockId struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number int64  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (m *BlockInventory_BlockId) Reset()                    { *m = BlockInventory_BlockId{} }
func (m *BlockInventory_BlockId) String() string            { return proto.CompactTextString(m) }
func (*BlockInventory_BlockId) ProtoMessage()               {}
func (*BlockInventory_BlockId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9, 0} }

func (m *BlockInventory_BlockId) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockInventory_BlockId) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type Inventory struct {
	Type Inventory_InventoryType `protobuf:"varint,1,opt,name=type,enum=protocol.Inventory_InventoryType" json:"type,omitempty"`
	Ids  [][]byte                `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *Inventory) GetType() Inventory_InventoryType {
	if m != nil {
		return m.Type
	}
	return Inventory_TRX
}

func (m *Inventory) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Items struct {
	Type         Items_ItemType `protobuf:"varint,1,opt,name=type,enum=protocol.Items_ItemType" json:"type,omitempty"`
	Blocks       []*Block       `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
	BlockHeaders []*BlockHeader `protobuf:"bytes,3,rep,name=block_headers,json=blockHeaders" json:"block_headers,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,4,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Items) Reset()                    { *m = Items{} }
func (m *Items) String() string            { return proto.CompactTextString(m) }
func (*Items) ProtoMessage()               {}
func (*Items) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *Items) GetType() Items_ItemType {
	if m != nil {
		return m.Type
	}
	return Items_ERR
}

func (m *Items) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *Items) GetBlockHeaders() []*BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

func (m *Items) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type DisconnectMessage struct {
	Reason ReasonCode `protobuf:"varint,1,opt,name=reason,enum=protocol.ReasonCode" json:"reason,omitempty"`
}

func (m *DisconnectMessage) Reset()                    { *m = DisconnectMessage{} }
func (m *DisconnectMessage) String() string            { return proto.CompactTextString(m) }
func (*DisconnectMessage) ProtoMessage()               {}
func (*DisconnectMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *DisconnectMessage) GetReason() ReasonCode {
	if m != nil {
		return m.Reason
	}
	return ReasonCode_REQUESTED
}

type HelloMessage struct {
	From    *Endpoint `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Version int32     `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *HelloMessage) Reset()                    { *m = HelloMessage{} }
func (m *HelloMessage) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()               {}
func (*HelloMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *HelloMessage) GetFrom() *Endpoint {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *HelloMessage) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*Account)(nil), "protocol.Account")
	proto.RegisterType((*Account_Vote)(nil), "protocol.Account.Vote")
	proto.RegisterType((*Witness)(nil), "protocol.Witness")
	proto.RegisterType((*TXOutput)(nil), "protocol.TXOutput")
	proto.RegisterType((*TXInput)(nil), "protocol.TXInput")
	proto.RegisterType((*TXInputRaw)(nil), "protocol.TXInput.raw")
	proto.RegisterType((*TXOutputs)(nil), "protocol.TXOutputs")
	proto.RegisterType((*Transaction)(nil), "protocol.Transaction")
	proto.RegisterType((*Transaction_Contract)(nil), "protocol.Transaction.Contract")
	proto.RegisterType((*Transaction_Result)(nil), "protocol.Transaction.Result")
	proto.RegisterType((*TransactionRaw)(nil), "protocol.Transaction.raw")
	proto.RegisterType((*BlockHeader)(nil), "protocol.BlockHeader")
	proto.RegisterType((*BlockHeaderRaw)(nil), "protocol.BlockHeader.raw")
	proto.RegisterType((*Block)(nil), "protocol.Block")
	proto.RegisterType((*ChainInventory)(nil), "protocol.ChainInventory")
	proto.RegisterType((*ChainInventory_BlockId)(nil), "protocol.ChainInventory.BlockId")
	proto.RegisterType((*BlockInventory)(nil), "protocol.BlockInventory")
	proto.RegisterType((*BlockInventory_BlockId)(nil), "protocol.BlockInventory.BlockId")
	proto.RegisterType((*Inventory)(nil), "protocol.Inventory")
	proto.RegisterType((*Items)(nil), "protocol.Items")
	proto.RegisterType((*DisconnectMessage)(nil), "protocol.DisconnectMessage")
	proto.RegisterType((*HelloMessage)(nil), "protocol.HelloMessage")
	proto.RegisterEnum("protocol.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("protocol.ReasonCode", ReasonCode_name, ReasonCode_value)
	proto.RegisterEnum("protocol.Transaction_TransactionType", Transaction_TransactionType_name, Transaction_TransactionType_value)
	proto.RegisterEnum("protocol.Transaction_Contract_ContractType", Transaction_Contract_ContractType_name, Transaction_Contract_ContractType_value)
	proto.RegisterEnum("protocol.Transaction_ResultCode", Transaction_ResultCode_name, Transaction_ResultCode_value)
	proto.RegisterEnum("protocol.BlockInventory_Type", BlockInventory_Type_name, BlockInventory_Type_value)
	proto.RegisterEnum("protocol.Inventory_InventoryType", Inventory_InventoryType_name, Inventory_InventoryType_value)
	proto.RegisterEnum("protocol.Items_ItemType", Items_ItemType_name, Items_ItemType_value)
}

func init() { proto.RegisterFile("core/Tron.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x16, 0xf8, 0xcf, 0x43, 0x4a, 0x82, 0x36, 0x92, 0x4b, 0x73, 0x6c, 0x8f, 0x8c, 0xb6, 0x89,
	0x9a, 0x1f, 0x2a, 0x51, 0x9a, 0xa9, 0xed, 0x9b, 0x96, 0x22, 0x91, 0x08, 0x35, 0x45, 0x32, 0x4b,
	0x30, 0xb1, 0x7b, 0xc3, 0x59, 0x91, 0x6b, 0x09, 0x13, 0x12, 0xcb, 0x01, 0x96, 0x92, 0x39, 0xd3,
	0x77, 0xe8, 0xf4, 0xb2, 0xbd, 0x69, 0x67, 0xfa, 0x0a, 0x9d, 0xbe, 0x40, 0x5f, 0xa2, 0x8f, 0xd0,
	0xb7, 0x68, 0xe7, 0x2c, 0x16, 0x04, 0x60, 0xc9, 0x6a, 0x27, 0x37, 0xd2, 0xee, 0xb7, 0x67, 0xcf,
	0x39, 0x7b, 0x7e, 0xbe, 0x03, 0xc2, 0xee, 0x54, 0x04, 0xfc, 0xd8, 0x0d, 0x84, 0xdf, 0x5a, 0x06,
	0x42, 0x0a, 0x52, 0x51, 0xff, 0xa6, 0x62, 0xde, 0x7c, 0x78, 0x29, 0xc4, 0xe5, 0x9c, 0x1f, 0x2b,
	0xe0, 0x62, 0xf5, 0xe6, 0x98, 0xf9, 0xeb, 0x48, 0xa8, 0xf9, 0x81, 0xba, 0xd5, 0xf5, 0xc2, 0xa9,
	0xb8, 0xe6, 0x41, 0x04, 0x5a, 0x7f, 0xcb, 0x43, 0xb9, 0x3d, 0x9d, 0x8a, 0x95, 0x2f, 0xc9, 0x53,
	0xa8, 0xb3, 0x68, 0x39, 0xf1, 0xd9, 0x82, 0x37, 0x8c, 0x43, 0xe3, 0xa8, 0x4e, 0x6b, 0x1a, 0xeb,
	0xb3, 0x05, 0x27, 0xbf, 0x80, 0x82, 0x5c, 0x2f, 0x79, 0x23, 0x77, 0x68, 0x1c, 0xed, 0x9c, 0x1c,
	0xb4, 0x62, 0xbb, 0x2d, 0xad, 0xc3, 0x5d, 0x2f, 0x39, 0x55, 0x22, 0xa4, 0x01, 0x65, 0x36, 0x9b,
	0x05, 0x3c, 0x0c, 0x1b, 0x79, 0xa5, 0x28, 0xde, 0xe2, 0xc9, 0x05, 0x9b, 0x33, 0x7f, 0xca, 0x1b,
	0x85, 0x43, 0xe3, 0x28, 0x4f, 0xe3, 0x2d, 0xf9, 0x14, 0x8a, 0xd7, 0x42, 0xf2, 0xb0, 0x51, 0x3c,
	0xcc, 0x1f, 0xd5, 0x4e, 0x1e, 0xdc, 0xd2, 0xdf, 0xfa, 0x4e, 0x48, 0x4e, 0x23, 0x21, 0x72, 0x02,
	0x45, 0x16, 0x86, 0x5c, 0x36, 0x4a, 0x4a, 0xfa, 0xd1, 0x6d, 0xe9, 0x36, 0x1e, 0xdb, 0xbe, 0x0c,
	0xd6, 0x34, 0x12, 0x25, 0x9f, 0xc3, 0xfe, 0x9c, 0x49, 0x1e, 0xca, 0x89, 0x58, 0x06, 0x4c, 0x7a,
	0xc2, 0x9f, 0x48, 0x6f, 0xc1, 0x1b, 0xa0, 0x1c, 0x21, 0xd1, 0xd9, 0x40, 0x1f, 0xb9, 0xde, 0x82,
	0x37, 0xcf, 0xa0, 0x80, 0x46, 0x31, 0x3a, 0x68, 0x76, 0x12, 0x3f, 0x4a, 0x47, 0x07, 0xb1, 0xb6,
	0x7e, 0xd8, 0x63, 0x00, 0x25, 0xa2, 0x8c, 0xab, 0x18, 0xe5, 0x69, 0x15, 0x91, 0x0e, 0x02, 0xcd,
	0x67, 0x00, 0x89, 0x43, 0xc4, 0x84, 0xfc, 0x0f, 0x7c, 0xad, 0xd4, 0x54, 0x29, 0x2e, 0xc9, 0x3e,
	0x14, 0xaf, 0xd9, 0x7c, 0xc5, 0xf5, 0xcd, 0x68, 0xf3, 0x22, 0xf7, 0xcc, 0xb0, 0xfe, 0x94, 0x83,
	0xf2, 0xf7, 0x9e, 0xf4, 0x75, 0xf4, 0xb2, 0x2e, 0x6c, 0xe2, 0xfa, 0x08, 0x12, 0x63, 0xb7, 0xac,
	0x93, 0x07, 0x50, 0x5a, 0xae, 0x2e, 0x5e, 0xf2, 0xb5, 0x4e, 0x87, 0xde, 0xa1, 0x1f, 0xab, 0x60,
	0xae, 0x32, 0x51, 0xa5, 0xb8, 0x24, 0x3f, 0x83, 0x6d, 0x29, 0x24, 0x9b, 0x0f, 0x03, 0x31, 0x5b,
	0x4d, 0xf9, 0xac, 0x51, 0x54, 0xba, 0xb2, 0x20, 0x39, 0x84, 0x9a, 0x02, 0xce, 0xbd, 0x30, 0xe4,
	0xb3, 0x46, 0x49, 0xc9, 0xa4, 0x21, 0xf2, 0x21, 0xec, 0x44, 0xf1, 0x3c, 0x9d, 0x8b, 0xe9, 0x0f,
	0xfd, 0xd5, 0xa2, 0x51, 0x56, 0x42, 0xef, 0xa0, 0x68, 0x2f, 0x42, 0x46, 0x73, 0x21, 0x51, 0xac,
	0x12, 0xd9, 0xcb, 0x80, 0xe8, 0xbf, 0x17, 0xfe, 0x56, 0x5c, 0x84, 0x8d, 0xea, 0xa1, 0x71, 0x54,
	0xa1, 0x7a, 0x67, 0xfd, 0x06, 0x2a, 0xee, 0xab, 0xc1, 0x4a, 0x2e, 0x57, 0x32, 0x89, 0xa0, 0x91,
	0x8a, 0x20, 0x79, 0x02, 0x10, 0xbd, 0xf5, 0x8c, 0x85, 0x57, 0x2a, 0x30, 0x75, 0x9a, 0x42, 0xac,
	0xbf, 0x1a, 0x50, 0x76, 0x5f, 0x39, 0x3e, 0x6a, 0xf8, 0x1c, 0x2a, 0x01, 0xbb, 0x99, 0xcc, 0x98,
	0x64, 0x4a, 0x49, 0x2d, 0x5d, 0xe4, 0x5a, 0xa8, 0x15, 0xb0, 0x1b, 0x5a, 0x0e, 0xd8, 0x4d, 0x97,
	0x49, 0x86, 0x51, 0x0f, 0xbd, 0x4b, 0x9f, 0xc9, 0x55, 0x10, 0xd5, 0x73, 0x9d, 0x26, 0x40, 0xd3,
	0x86, 0x7c, 0xc0, 0x6e, 0x08, 0x81, 0x82, 0x7c, 0xeb, 0x74, 0x75, 0xc6, 0xd4, 0x1a, 0xb1, 0x6b,
	0xb1, 0x8a, 0x33, 0xa5, 0xd6, 0xef, 0x4b, 0x92, 0xf5, 0x1c, 0xaa, 0xf1, 0x23, 0x43, 0xf2, 0x29,
	0x94, 0x45, 0xb4, 0x6c, 0x18, 0xaa, 0xf2, 0x49, 0xda, 0xc5, 0x48, 0x8a, 0xc6, 0x22, 0xd6, 0xdf,
	0xcb, 0x50, 0x73, 0x03, 0xe6, 0x87, 0x6c, 0x8a, 0x35, 0x4d, 0x7e, 0x79, 0xeb, 0x85, 0x0f, 0x53,
	0xd7, 0x13, 0xc1, 0x7b, 0x5e, 0x99, 0x3b, 0xcc, 0x67, 0x5e, 0x49, 0x5a, 0x90, 0x0f, 0xb8, 0xd4,
	0x5d, 0xfb, 0xe8, 0x6e, 0x75, 0x94, 0x87, 0xab, 0xb9, 0xa4, 0x28, 0xd8, 0xfc, 0x63, 0x1e, 0x2a,
	0x1d, 0xe1, 0xcb, 0x80, 0x4d, 0x25, 0xf9, 0xb5, 0xe6, 0x14, 0x43, 0x71, 0xca, 0x27, 0x77, 0xdf,
	0x8e, 0xa5, 0x37, 0x8b, 0x14, 0xd3, 0x9c, 0x40, 0x75, 0xc9, 0x02, 0xb6, 0xe0, 0x92, 0x07, 0x2a,
	0x9a, 0xb5, 0x93, 0xfd, 0x56, 0xc4, 0x83, 0xad, 0x98, 0x07, 0x5b, 0x6d, 0x7f, 0x4d, 0x13, 0x31,
	0xeb, 0x0f, 0x39, 0xa8, 0xa7, 0x55, 0x91, 0x87, 0x70, 0xa0, 0x59, 0xa3, 0x13, 0x70, 0x86, 0x4d,
	0x13, 0x1d, 0x9a, 0x5b, 0x64, 0x1f, 0x4c, 0xe5, 0xca, 0x1b, 0x1e, 0x6c, 0x50, 0x03, 0x2f, 0xc4,
	0xa8, 0xea, 0xea, 0xcd, 0x51, 0x8e, 0x1c, 0xc0, 0x1e, 0x52, 0x46, 0x16, 0xce, 0x93, 0x9f, 0xc0,
	0x07, 0x08, 0xeb, 0x46, 0xde, 0x1c, 0x14, 0x50, 0x55, 0x0c, 0x66, 0x6d, 0x17, 0xc9, 0x03, 0x20,
	0x4a, 0x8d, 0x13, 0x86, 0xab, 0x04, 0x2f, 0x11, 0x02, 0x3b, 0x5d, 0xbe, 0x9c, 0x8b, 0xf5, 0x06,
	0x2b, 0xa7, 0xd4, 0x8c, 0x97, 0xb3, 0xb4, 0x9a, 0x0a, 0x79, 0x0a, 0x8f, 0x87, 0x2c, 0x90, 0xde,
	0xd4, 0x5b, 0x32, 0xed, 0x58, 0x56, 0x63, 0xb5, 0x29, 0xa0, 0x14, 0xa5, 0x08, 0x19, 0xe1, 0x0d,
	0x8f, 0x7b, 0x08, 0x97, 0xe4, 0xcb, 0x28, 0xbf, 0x11, 0xeb, 0x3f, 0xbd, 0x2f, 0xbf, 0xad, 0xa9,
	0x98, 0x71, 0x95, 0x64, 0xeb, 0x09, 0x14, 0x70, 0x43, 0x00, 0x4a, 0xa3, 0x71, 0xc7, 0x1e, 0x8d,
	0xcc, 0x2d, 0x5c, 0x7f, 0xdd, 0x76, 0x7a, 0x76, 0xd7, 0x34, 0x9a, 0xff, 0x36, 0xa2, 0xde, 0x78,
	0x9e, 0x99, 0x29, 0x3f, 0xbf, 0x5b, 0x7b, 0x6a, 0x9d, 0xca, 0xfc, 0x13, 0x00, 0xfe, 0x76, 0xe9,
	0x45, 0x6c, 0xad, 0x69, 0x23, 0x85, 0x60, 0x8b, 0xa9, 0x3a, 0x87, 0xa8, 0xed, 0x70, 0x4d, 0x5e,
	0x40, 0x65, 0xaa, 0x5f, 0xdd, 0xa8, 0xa9, 0x82, 0x7d, 0x72, 0x7f, 0xc9, 0xd1, 0x8d, 0x3c, 0x72,
	0x6f, 0x38, 0x0d, 0xbc, 0xa5, 0x0c, 0x1b, 0x66, 0xc4, 0xbd, 0x7a, 0x8b, 0xfd, 0x81, 0x73, 0x24,
	0x94, 0x6c, 0xb1, 0x6c, 0xec, 0x45, 0xdc, 0xbb, 0x01, 0xac, 0x2f, 0x60, 0xf7, 0x9d, 0x07, 0x90,
	0x3a, 0x54, 0xc6, 0xf2, 0xad, 0xc0, 0xb5, 0xb9, 0x45, 0xcc, 0x6c, 0x35, 0x9a, 0x86, 0xf5, 0x8f,
	0x1c, 0xd4, 0x14, 0x43, 0x9e, 0x71, 0x36, 0xe3, 0xc1, 0xfd, 0x6d, 0x9b, 0x12, 0xcc, 0xb6, 0xed,
	0x27, 0xb0, 0x77, 0x13, 0x95, 0xc4, 0x24, 0xdd, 0xbe, 0xe8, 0xba, 0xa9, 0x0f, 0x46, 0x1b, 0xae,
	0xfa, 0xa7, 0x4e, 0x48, 0xe6, 0x2d, 0xc6, 0x3b, 0x6f, 0xc1, 0x98, 0xcb, 0xb7, 0x6e, 0xe0, 0x71,
	0x2a, 0x84, 0x8c, 0xd9, 0x34, 0x41, 0x14, 0xdb, 0xb2, 0x80, 0xfb, 0x52, 0xb1, 0x6d, 0x5e, 0xb3,
	0xed, 0x06, 0x41, 0x8a, 0xf3, 0x57, 0x8b, 0x0b, 0x1e, 0xe8, 0x69, 0xa0, 0x77, 0x38, 0x3c, 0x63,
	0x57, 0xbd, 0x99, 0xce, 0x65, 0x55, 0x23, 0xce, 0x8c, 0x7c, 0x04, 0xbb, 0xf1, 0x71, 0x3c, 0xfe,
	0xaa, 0x4a, 0xf7, 0x8e, 0x86, 0xf5, 0x10, 0xb6, 0x7e, 0x0f, 0x45, 0x15, 0x0e, 0xf2, 0x1c, 0xea,
	0x32, 0x09, 0x7a, 0xcc, 0x95, 0x07, 0x77, 0x26, 0x9b, 0x66, 0x44, 0xc9, 0x33, 0xa8, 0x5f, 0xa0,
	0x8e, 0xc9, 0x95, 0x8a, 0xa9, 0x26, 0x95, 0x83, 0x3b, 0x03, 0x4e, 0x6b, 0x17, 0xc9, 0xc6, 0xfa,
	0xb3, 0x01, 0x3b, 0x9d, 0x2b, 0xe6, 0xf9, 0x8e, 0x7f, 0xcd, 0x7d, 0x29, 0x82, 0x35, 0x39, 0x81,
	0xbc, 0x37, 0x8b, 0xcd, 0x1f, 0x26, 0x3a, 0xb2, 0x62, 0x91, 0x4a, 0x67, 0x46, 0x51, 0x18, 0x83,
	0x11, 0xf0, 0x05, 0xf3, 0xfc, 0x89, 0xbf, 0x5a, 0xc4, 0xb3, 0x3c, 0x42, 0xfa, 0xab, 0x45, 0xf3,
	0x2b, 0x28, 0x6b, 0x71, 0x2c, 0xf1, 0x2b, 0x0c, 0xb4, 0x9e, 0x2c, 0x57, 0xd9, 0x10, 0xe7, 0xd2,
	0x21, 0xb6, 0xfe, 0x65, 0xc0, 0x4e, 0x74, 0xef, 0x7f, 0x3a, 0x97, 0x15, 0xcb, 0x3a, 0xf7, 0x45,
	0xa6, 0x61, 0x1f, 0xbf, 0xf7, 0x52, 0xd2, 0xa8, 0x3f, 0xd6, 0xe1, 0x23, 0x28, 0xa8, 0x66, 0xa9,
	0x40, 0x61, 0xf4, 0xba, 0xdf, 0x31, 0xb7, 0x48, 0x0d, 0xca, 0xed, 0xee, 0x77, 0xae, 0x33, 0xb2,
	0x4d, 0x83, 0x54, 0xa1, 0xf8, 0xb5, 0xed, 0x76, 0xce, 0xcc, 0x9c, 0xb5, 0x86, 0x6a, 0xf2, 0xa8,
	0xaf, 0x32, 0x13, 0x25, 0xc5, 0x57, 0x89, 0x6f, 0x9b, 0x55, 0x8a, 0x4d, 0xcc, 0x28, 0x16, 0xd1,
	0x74, 0xc3, 0xa5, 0xf5, 0x53, 0xd8, 0xce, 0x08, 0x92, 0x32, 0xe4, 0x5d, 0xfa, 0xca, 0xdc, 0x42,
	0xd3, 0xa7, 0xbd, 0x41, 0xe7, 0xa5, 0x69, 0xe0, 0x28, 0x29, 0x3a, 0x92, 0x2f, 0x70, 0x30, 0xa7,
	0xed, 0x36, 0x52, 0x76, 0xf1, 0x58, 0xfd, 0x4d, 0x99, 0xfb, 0x08, 0x4a, 0xaa, 0x72, 0x22, 0x8b,
	0xb5, 0x93, 0xdd, 0x77, 0x02, 0x49, 0xf5, 0x31, 0x79, 0x01, 0xdb, 0xe9, 0x6a, 0xc4, 0xef, 0xe9,
	0xfc, 0xfb, 0xcb, 0xb1, 0x9e, 0x2a, 0xc7, 0xf0, 0x56, 0x13, 0x14, 0xfe, 0xef, 0x26, 0xb0, 0x9e,
	0x41, 0x25, 0xf6, 0x18, 0xdf, 0x6d, 0x53, 0x6a, 0x6e, 0xc5, 0x01, 0x30, 0x92, 0x00, 0xe4, 0xc8,
	0x2e, 0xd4, 0xd4, 0xf2, 0xcc, 0x6e, 0x77, 0x6d, 0x6a, 0xe6, 0xad, 0x36, 0xec, 0xa9, 0x9f, 0x19,
	0xbe, 0xcf, 0xa7, 0xf2, 0x9c, 0x87, 0x21, 0xbb, 0xc4, 0x6f, 0xfb, 0x52, 0xc0, 0x59, 0x28, 0x7c,
	0x1d, 0x9e, 0xfd, 0xc4, 0x07, 0xaa, 0xf0, 0x0e, 0x4e, 0x0e, 0x2d, 0x63, 0x0d, 0xa1, 0x7e, 0xc6,
	0xe7, 0x73, 0x11, 0xdf, 0xfe, 0x10, 0x0a, 0x6f, 0x02, 0xb1, 0xd0, 0xd4, 0x97, 0xfa, 0xe0, 0xb1,
	0xfd, 0xd9, 0x52, 0x78, 0xbe, 0xa4, 0xea, 0x1c, 0x19, 0xfa, 0x9a, 0x07, 0x21, 0x8e, 0x03, 0x2c,
	0xa5, 0x22, 0x8d, 0xb7, 0x1f, 0xff, 0x0a, 0x6a, 0xa9, 0x1f, 0x29, 0x38, 0x89, 0xfa, 0x22, 0x58,
	0xb0, 0xb9, 0xb9, 0x45, 0x76, 0xf4, 0x87, 0xb9, 0x1a, 0x89, 0xa6, 0x81, 0xdc, 0x9c, 0x4c, 0xf3,
	0x8f, 0xff, 0x92, 0x03, 0x48, 0x3c, 0x24, 0xdb, 0x50, 0xa5, 0xf6, 0xb7, 0x63, 0x7b, 0xe4, 0xda,
	0x5d, 0x73, 0x0b, 0xb7, 0x6e, 0x67, 0x38, 0xb1, 0x29, 0x1d, 0x50, 0xd3, 0x40, 0x22, 0x3f, 0x6d,
	0x77, 0x27, 0x43, 0x3a, 0x70, 0x07, 0x9d, 0x41, 0xcf, 0xcc, 0x21, 0x32, 0x1e, 0xd9, 0x3d, 0x7b,
	0x34, 0x9a, 0x0c, 0x6d, 0x0c, 0x0f, 0xce, 0x6e, 0x77, 0x30, 0x98, 0x9c, 0xb7, 0xfb, 0xaf, 0x15,
	0x34, 0x32, 0x0b, 0x6a, 0x9e, 0x8f, 0x87, 0x3d, 0xa7, 0xd3, 0x76, 0xed, 0x48, 0xae, 0x88, 0xf3,
	0xdc, 0xe9, 0x77, 0x06, 0xe7, 0xc3, 0xb6, 0xeb, 0x9c, 0xf6, 0xec, 0x44, 0x69, 0x89, 0xec, 0xc1,
	0x76, 0x7f, 0xdc, 0xeb, 0x4d, 0x9c, 0xae, 0xdd, 0x77, 0x1d, 0xf7, 0xb5, 0x59, 0x46, 0x3b, 0x78,
	0x6f, 0xf2, 0xed, 0xd8, 0x71, 0x9d, 0xfe, 0x37, 0x66, 0x05, 0xbf, 0x37, 0xc6, 0x7d, 0xfb, 0xd5,
	0xd0, 0xee, 0xb8, 0x76, 0x37, 0x11, 0xad, 0xa2, 0xb1, 0xde, 0xa0, 0xd3, 0x4e, 0x5d, 0x07, 0x75,
	0xdd, 0xe9, 0x7f, 0x33, 0x71, 0x9d, 0x73, 0x7b, 0x30, 0x76, 0xcd, 0x1a, 0xa6, 0x75, 0x3c, 0xb2,
	0xe9, 0x84, 0xda, 0xed, 0xd1, 0xa0, 0x6f, 0xd6, 0x31, 0xe5, 0xd4, 0x1e, 0xd9, 0xae, 0x69, 0x92,
	0x3a, 0x94, 0xc7, 0xfd, 0x97, 0xfd, 0xc1, 0xf7, 0x7d, 0xf3, 0x3f, 0xc6, 0xe9, 0x31, 0xec, 0x8a,
	0xe0, 0xb2, 0x25, 0x37, 0x3f, 0x48, 0xc3, 0xd3, 0xca, 0x50, 0x27, 0xe8, 0x77, 0xe4, 0x52, 0x7c,
	0x36, 0x9d, 0x7b, 0xdc, 0x97, 0x9f, 0xb1, 0xa5, 0x77, 0x8c, 0x3f, 0x42, 0x2f, 0x4a, 0x4a, 0xea,
	0xcb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x06, 0xeb, 0xf6, 0xb4, 0xc9, 0x0e, 0x00, 0x00,
}
